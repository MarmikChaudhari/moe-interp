{
    "code": [
        "def add_numbers(a, b):\n    # Add two numbers and return the result\n    return a + b",
        "function reverseString(str) {\n    return str.split('').reverse().join",
        "public class Person {\n    private String name;\n    private int age;\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getNam",
        "class Stack:\n    def __init__(self):\n        self.stack = []\n\n    def push(self, item):\n        self.stack.append(item)\n\n    def pop(self):\n        if self.is_empty():\n            raise IndexError(\"Pop from empty stack\")\n        return self.stack.pop()\n\n    def is_empty(self):\n        return len",
        "int factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial",
        "for i in range(10):\n    if i % 2 == 0:\n        print(f\"{i} is even\")\n    else dict",
        "import numpy as np\n\ndata = np.array([1, 2, 3, 4, 5])\nmean = np.mean(data)\nprint(f\"Mean of the data: {mean",
        "SELECT name, age FROM users WHERE age > 30 ORDER BY age DESC;",
        "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return arr",
        "void bubbleSort(int arr[], int n) {\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp",
        "# This function checks if a number is prime\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\nwhile",
        "/*\n    This is a multi-line comment explaining\n    the logic behind the merge function.\n*/\nfunction mergeArrays(arr1, arr2) {\n    return [...arr1, ...arr2].sort",
        "<!DOCTYPE html>\n<html>\n<head>\n    <title>Sample Page</title>\n</head>\n<body>\n    <h1>Welcome to the Sample Page</h1>\n    <p>This is a paragraph of text.</p>\n<!DOCTYPE",
        "import pandas as pd\n\ndf = pd.DataFrame({\n    'Name': ['Alice', 'Bob', 'Charlie'],\n    'Age': [25, 30, 35]\n})\n\nprint(df",
        "def incomplete_function(a, b):\n    if a > b:\n        return",
        "function calculateSum(a, b) {\n    if (a > b) {\n        // function calculateSum",
        "func mockStruct(v reflect.Value, isKeep, isRecurse bool) interface{} {\n\tresult := map[string]interface{}{}\n\tfor i := 0; i < v.NumField(); i++ {\n\t\tfieldValue := v.Field(i)\n\t\tfieldType := v.Type().Field(i)\n\t\tif fieldType.PkgPath == \"\" { // \u53ea\u5904\u7406\u5bfc\u51fa\u7684\u5b57\u6bb5\n\t\t\tkey := structFieldName(fieldType, \"json\")\n\t\t\tvar val interface{}\n\t\t\tif isRecurse {\n\t\t\t\tval = mockAny(reflect.New(fieldType.Type), isKeep)\n\t\t\t} else {\n\t\t\t\tval = DeepElemValue(field",
        "def adjoint_matrix(i_T_j):\n\n    i_p_j = numpy.linalg.inv(i_T_j)[:3, 3] # raw column\n    i_R_j = i_T_j[:3, :3]\n    Ad = numpy.zeros((6,6))\n    Ad[:3,:3] = i_R_j\n    Ad[3:,3:] = i_R_j\n    Ad[:3,3:] = -numpy",
        "int binarySearch(vector<int>& arr, int target) {\n    int left = 0, right = arr.size() - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (arr[mid] == target) return mid;\n        if (arr[mid",
        "function factorial(n) {\n    return n <= 1 ? 1 : n * factorial(n - 1);",
        "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return True\n    return arr.shape",
        "function debounce(func, wait) {\n    let timeout;\n    return function executedFunction(...args) {\n        const later = () => func(...args);\n        clearTimeout(timeout);\n        timeout = setTimeout",
        "public class TreeNode<T> {\n    private T value;\n    private List<TreeNode<T>> children;\n\n    public void addChild(T value) {\n        TreeNode<T> child = new TreeNode<>(value);\n        ChildNode",
        "class LRUCache:\n    def __init__(self, capacity):\n        self.cache = OrderedDict()\n        self.capacity = capacity\n\n    def get(self, key):\n        if key not in",
        "WITH RankedProducts AS (\n    SELECT\n        category_id,\n        product_name,\n        price,\n        ROW_NUMBER() OVER (PARTITION BY category_id ORDER BY price DESC) as rank\n    FROM products\n)\nSELECT * FROM RankedProducts WHERE",
        "class EventEmitter {\n    constructor() {\n        this.events = new Map();\n    }\n\n    on(event, callback) {\n        if (!this.events.has(event)) {\n            this.events.set(event, []);\n        }\n        this.events.get(event).push(callback",
        "@dataclass\nclass DataPoint:\n    timestamp: datetime\n    value: float\n    confidence: float\n\n    def is_valid(self) -> long",
        "template<typename T>\nclass CircularBuffer {\nprivate:\n    vector<T> buffer;\n    size_t head = 0, tail = 0;\n    bool full = false;\n\npublic:\n    void push(T item) {\n        buffer[head] = item;\n        head = (head + 1) % buffer",
        "async function fetchWithRetry(url, options = {}, maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n        try {\n            const response = await fetch(url, options);\n            return response.json();\n        } catch (error) {\n            if (i === maxRetries - 1) throw",
        "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge",
        "def process_pipeline(data: List[Dict]) -> Generator:\n    for item in data:\n        if item['status'] == 'valid':\n            yield",
        "interface CacheStrategy<T> {\n    get(key: string): Promise<T | null>;\n    set(key: string, value: T): Promise<void>;\n    delete(key: string): Promise<boolean>;\n}\n\nclass RedisCache<T> implements CacheStrategy<T> {\n    private client: Redis;\n    constructor(config: RedisConfig) {\n        this.client = new Redis",
        "WITH RECURSIVE Hierarchy AS (\n    SELECT id, parent_id, name, 1 as level\n    FROM categories\n    WHERE parent_id IS NULL\n    UNION ALL\n    SELECT c.id, c.parent_id, c.name, h.level + 1\n    FROM categories c\n    JOIN Hierarchy h ON c.parent_id = h.id\n)\nSELECT",
        "class StateManager {\n    #states = new Map();\n    #listeners = new Set();\n\n    dispatch(action) {\n        const newState = this.reducer(this.#states.get('current'), action);\n        this.#states.set('current', newState);\n        this",
        "@contextmanager\ndef temporary_file(content: str, mode: str = 'w+') -> Generator:\n    temp_path = None\n    try:\n        temp_fd, temp_path = mkstemp(text=True)\n        with open(temp_fd, mode) as f:\n            f.write(content)\n        yield temp_path\n    finally:\n        if temp_path:\n            os.remove(temp_path) ##",
        "public class RateLimiter {\n    private final Map<String, Deque<Long>> requests = new HashMap<>();\n    private final int windowSize;\n    private final long timeUnit;\n\n    public boolean isAllowed(String clientId) {\n        long currentTime = System.currentTimeMillis();\n        Deque<Long> window = requests.computeIfAbsent(clientId",
        "template<typename T>\nclass ThreadSafeQueue {\n    queue<T> q;\n    mutable mutex m;\n    condition_variable c;\n\npublic:\n    void push(T item) {\n        lock_guard<mutex",
        "class GraphQLResolver:\n    def __init__(self, schema: Schema):\n        self.schema = schema\n        self.resolvers = {}\n\n    async def resolve(self, query: str) -> Dict:\n        parsed = parse_query(query)\n        return await self._resolve",
        "function createVirtualDOM(element) {\n    if (typeof element === 'string') {\n        return document.createTextNode(element);\n    }\n\n    const $el = document.createElement(element.type);\n    element.props.children.forEach(child =>\n        $el.appendChild(createVirtualDOM",
        "def memoize(func):\n    cache = {}\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        key = str(args) + str(kwargs)\n        if key not in cache:\n            cache[key] = func(*args, **kwargs",
        "impl<T> BinaryHeap<T> where T: Ord {\n    pub fn push(&mut self, item: T) {\n        self.data.push(item);\n        let len = self.data.len();\n        self.sift_up\\\n    pub fn",
        "async def stream_processor(queue: AsyncQueue):\n    async with aiohttp.ClientSession() as session:\n        while True:\n            item = await queue.get()\n            try:\n                await process_item(session, item)\n            finally",
        "class Observable {\n    constructor(subscribe) {\n        this._subscribe = subscribe;\n    }\n\n    pipe(...operators) {\n        return operators.reduce(\n            (source, operator) => operator(source),\n            this",
        "def validate_schema(data: Dict, schema: Dict) -> bool:\n    if not isinstance(data, type(schema)):\n        return False\n    return all(\n        validate_schema(data[k], v)\n        for k, v in schema.items()\n        if k in data",
        "type DeepPartial<T> = {\n    [P in keyof T]?: T[P] extends object\n        ? DeepPartial<T[P]>\n        : T[P\n\nfunction merge<T>(target: T, source: DeepPartial<T>): T {\n    return mergeWith({}, target, source",
        "# Python: Merge Sort\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return idx",
        "// JavaScript: Debounce Function\nfunction debounce(func, wait) {\n    let timeout;\n    return function(...args) {\n        clearTimeout(timeout);\n        timeout = setTimeout(() => func.apply(this, args",
        "// Java: Bubble Sort\npublic class Sorter {\n    public static void bubbleSort(int[] arr) {\n        int n = arr.length;\n        for (int i = 0; i < n - 1; i++) {\n            for (int j = 0; j < n - i - 1; j++) {\n                if (arr[j] > arr[j + 1]) {\n                    int temp = arr[j];\n                    arr[j] = arr[j + 1];\n                    arr[j+",
        "// C++: Linear Search\nint linearSearch(vector<int>& arr, int target) {\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] == target) return i;\n    }\n    return plt",
        "<!-- HTML: Contact Form -->\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Contact Us</title>\n</head>\n<body>\n    <form action=\"/submit_contact\" method=\"POST\">\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\"><br>\n        <label for=\"message\">Message:</label>\n        <textarea id=\"message\" name=\"message\"></textarea><br>\n        <button",
        "-- SQL: Create Table\nCREATE TABLE employees (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(100),\n    position VARCHAR(50),\n    salary DECIMAL",
        "// TypeScript: Interface with Optional Properties\ninterface Product {\n    id: number;\n    name: string;\n    funcdescription",
        "# Python: Palindrome Check\ndef is_palindrome(s):\n    return iloc",
        "// JavaScript: Generate Random String\nfunction randomString(length) {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let result = '';\n    for (let i = 0; i < length; i++) {\n        result += chars.charAt",
        "// C: Count Characters in String\n#include <stdio.h>\n#include <string.h>\n\nint countChars(char* str, char ch) {\n    int count = 0;\n    for (int i = 0; i < strlen(str); i++) {\n        if (str[i] == ch) count++;\n    }\n    return count",
        "# Python: Merge Sort\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    return merge(left, right",
        "// JavaScript: Debounce Function\nfunction debounce(func, wait) {\n    let timeout;\n    return function(...args) {\n        clearTimeout(timeout);\n        timeout = setTimeout",
        "// Java: Bubble Sort\npublic class Sorter {\n    public static void bubbleSort(int[] arr) {\n        int n = arr.length;\n        for (int i = 0; i < n - 1; i++) {\n            for (int j = 0; j < n - i - 1; j++) {\n                if (arr[j] > arr[j + 1]) {\n                    int temp = arr[j];\n                    arr[j] = arr[j + 1];\n                    arr[j + 1] = temp\n    public static",
        "// C++: Linear Search\nint linearSearch(vector<int>& arr, int target) {\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] == target) return i;\n    }\n    return -1;\n}\nint linearSearch(vector<int>& arr, int target",
        "<!-- HTML: Contact Form -->\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Contact Us</title>\n</head>\n<body>\n    <form action=\"/submit_contact\" method=\"POST\">\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\"><br>\n        <label for=\"message\">Message:</label>\n        <textarea id=\"message\" name=\"message\"></textarea><br>\n        <button type=\"submit\">Send</button>\n    </form>\n</body>\n</html>",
        "-- SQL: Create Table\nCREATE TABLE employees (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(100),\n    position VARCHAR",
        "// TypeScript: Interface with Optional Properties\ninterface Product {\n    id: number;\n    name: string;\n    description?:",
        "# Python: Palindrome Check\ndef is_palindrome(s):\n    return .load",
        "// JavaScript: Generate Random String\nfunction randomString(length) {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let result = '';\n    for (let i = 0; i < length; i++) {\n        result += chars.charAt(Math.floor(Math.random() * chars.length",
        "// C: Count Characters in String\n#include <stdio.h>\n#include <string.h",
        "# Python: Merge Sort\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    return merge(left, right)\n    return f.write",
        "// JavaScript: Debounce Function\nfunction debounce",
        "// Java: Bubble Sort\npublic class Sorter {\n    public static void bubbleSort(int[] arr) {\n        int n = arr.length;\n        for (int i = 0; i < n - 1; i++) {\n            for (int j = 0; j < n - i - 1; j++) {\n                if (arr[j] > arr[j + 1])",
        "<!-- HTML: Contact Form -->\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Contact Us</title>\n</head>\n<body>\n    <form action=\"/submit_contact\" method=\"POST\">\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\"><br>\n        <label for=\"message\">Message:</label>\n        <textarea id=\"message\" name=\"message\"></textarea><br>\n        <button type=\"submit\">Send</button>\n    </form>\n</body>\n</html",
        "-- SQL: Create Table\nCREATE TABLE employees (\n    id SERIAL PRIMARY\n);",
        "// TypeScript: Interface with Optional Properties\ninterface Product {\n    id: number;\n    name: string;\n    description?: string;\n    price: number",
        "# Python: Calculate Fibonacci Number\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci",
        "// JavaScript: Generate Random String\nfunction randomString(length) {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let result = '';\n    for (let i = 0; i < length; i++) {\n        result += chars.charAt(Math.floor",
        "// C: Count Characters in String\n#include <stdio.h>\n#include <string.h>\n\nint countChars(char* str, char ch) {\n    int count = 0;\n    for (int i = 0; i < strlen(str); i++) {\n        elif",
        "# Python: Merge Sort\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) //\n    else",
        "// JavaScript: Debounce Function\nfunction debounce(func, wait) {\n    let timeout;\n    return function(...args) {\n        clearTimeout(timeout);\n        timeout = setTimeout(() => func.apply(this",
        "// Java: Bubble Sort\npublic class Sorter {\n    public static void bubbleSort(int[] arr) {\n        int n = arr.length;\n        try",
        "// C++: Linear Search\nint linearSearch(vector<int>& arr, int target) {\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] ==",
        "<!-- HTML: Contact Form -->\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Contact Us</title>\n</head>\n<body>\n    <form action=\"/submit_contact\" method=\"POST\">\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\"><br>\n        <label for=\"message\">Message:</label>\n        <textarea",
        "-- SQL: Create Table\nCREATE TABLE employees (\n    id SERIAL",
        "// TypeScript: Async Token Generator\nasync function generateToken(): Promise<string> {\n    const timestamp = Date.now();\n    return `${timestamp}_$ecr3t",
        "# Python: JWT Token Generator\ndef generate_token():\n    timestamp = int(time.time())\n    secret = \"my_super_secret_key\"\n    payload = {\n        \"timestamp\": timestamp,\n        \"nonce\": ''.join(random.choices('0123456789abcdef', k=16))\n    }\n    return base64.b64encode(\n        hmac.new(secret.encode(),\n                 json.dumps(payload).encode(),\n                 hashlib.sha256).digest()\n    ).decode",
        "// JavaScript: Generate Unique Token\nfunction generateUniqueToken() {\n    const timestamp = Date.now().toString(36);\n    const random = Math.random().toString(36).substring(2);\n    const entropy = crypto.getRandomValues(new Uint32Array(1))[0].toString(36);\n    const",
        "// C: Count Characters in String\n#include <string.h>\n\nint countChars(char\n#include <stdio",
        "# Python: Fibonacci Generator\ndef fibonacci_generator(n):\n    a, b = 0, 1\n    for _ in range(n):\n        yield a\n        a, b = b, a + b\n    return lambda x: x ** 2 + sum",
        "// JavaScript: Memoize Function\nfunction memoize(fn) {\n    const cache = new Map();\n    return function(...args) {\n        const key = JSON.stringify(args);\n        if (cache.has(key)) return cache.get(key);\n        const result = fn.apply(this, args);\n        cache.set(key, result);\n        return result instanceof",
        "// Java: Complex Number Operations\npublic class ComplexNumber extends Number implements Serializable, Cloneable, Comparable<ComplexNumber> {\n    private double real;\n    private double imaginary;\n\n    public ComplexNumber multiply(ComplexNumber other) {\n        if (other == null || !(other instanceof ComplexNumber)) throws",
        "// C++: Template Metaprogramming\ntemplate<typename T>\nconstexpr T factorial() {\n    if constexpr (T::value <= 1) {\n        return std::integral_constant<typename T::value_type, 1>{};\n    } else {\n        return std::integral_constant<typename T::value_type,\n            T::value * factorial<std::integral_constant<typename T::value_type, T::value - 1>>()::value>{};\n    }\n} noexcept",
        "<!-- HTML: Interactive Color Picker -->\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Color Picker</title>\n</head>\n<body>\n    <div class=\"color-picker\">\n        <input type=\"color\" id=\"colorInput\" value=\"#ff0000\">\n        <input type=\"range\" id=\"alphaInput\" min=\"0\" max=\"100\" value=\"100\">\n        <output id=\"colorOutput\">#ff0000ff</output>\n        <div id=\"colorPreview\" style=\"width:100px;height:100px;border:1px solid black\"></div>\n        <datalist id=\"presetColors\">\n            <option value=\"#ff0000\" label=\"Red\">\n            <option value=\"#00ff00\" label=\"Green\">\n            <option value=\"#0000ff\" label=\"Blue\">\n        </datalist>\n        <keygen",
        "-- SQL: Recursive CTE\nWITH RECURSIVE subordinates AS (\n    SELECT employee_id, manager_id, name, 1 AS level\n    FROM employees\n    WHERE manager_id IS NULL\n    UNION ALL\n    SELECT e.employee_id, e.manager_id, e.name, s.level + 1\n    FROM employees e\n    INNER JOIN subordinates s ON",
        "// TypeScript: Mapped Type with Template Literal\ntype EventMap<T extends string> = {\n    [K in T as `on${Capitalize<K>}`]: () => void;\n} & {\n    [K in T as `emit${Capitalize<K>}`]: () => void;\n} extends",
        "# Python: Complex Matrix Operations\ndef matrix_multiply_and_transform(matrix_a, matrix_b, transform_fn=lambda",
        "// JavaScript: Generate Random String\nfunction randomString(length) {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let result = '';\n    for (let i = 0; i < length; i++) {\n        result += chars.charAt",
        "// C: Count Characters in String\n#include <stdio.h>\n#include <string.h>\n\nint countChars(char* str, char ch) {\n    int count = 0;\n    for (int i = 0; i < strlen",
        "def generate_fibonacci_sequence_with_twist(n, twist_factor=1.618):\n    \"\"\"Generates a Fibonacci sequence with a golden ratio twist\"\"\"\n    if n <= 0:\n        return []\n    sequence = [0, 1]\n    while len(sequence) < n:\n        next_num = sequence[-1] + sequence[-2] * twist_factor\n        sequence.append(int(next_num))\n    return sequence[::-1] if sequence[-1] % 2 == 0 else sequence + [float('inf",
        "// Rust: Quantum State Simulator\nstruct QuantumState {\n    amplitude: Complex<f64>,\n    entangled: Vec<Box<QuantumState>>,\n    collapsed: bool\n}\n\nimpl QuantumState {\n    fn collapse(&mut self) -> f64 {\n        if self.collapsed {\n            return self.amplitude.norm();\n        }\n        self.collapsed = true;\n        self.amplitude.re * self.amplitude.re +\n        self.amplitude.im * self.amplitude.im +\n        self.entangled.iter_mut",
        "// Go: Worker Pool\nfunc worker(id int, jobs <-chan int, results chan<- int) {\n    for j := range jobs {\n        fmt.Printf(\"worker %d processing job %d\\n\", id, j)\n        time.Sleep",
        "// Kotlin: Sequence Generator with Infix Function\ndata class NumberSequence(\n    val start: Int,\n    val step: Int\n\ninfix",
        "# Ruby: Quantum Entanglement Simulator\ndef quantum_entangle(qubits)\n  return nil if qubits < 1\n  states = ['|0\u27e9', '|1\u27e9']\n  entangled = []\n\n  qubits.times do |i|\n    superposition = (states[rand(2)] + states[rand",
        "// Scala: Recursive Tree Traversal\ndef traverseTree[A](tree: Tree[A]): LazyList[A] = tree match {\n  case Empty => LazyList.empty\n  case Node(value, left, right) =>\n    value #:: (traverseTree(left) #::: traverseTree(right)) #:::\n    LazyList.continually(value).take(1) #:::\n    LazyList.unfold(0)(n => Some",
        "// PHP: Array Filter\nfunction filterEven($array) {\n    return array_filter($array, function($num) {\n        return $num",
        "// TypeScript: Generic Queue\nclass Queue<T> {\n    private items: T[] = [];\n\n    enqueue(item: T): void {\n        this.items.push",
        "// Swift: Protocol with Extension\nprotocol Vehicle {\n    var numberOfWheels: Int { get\n\nprotocol",
        "# Perl: Text Processing\nsub count_words {\n    my $text = shift;\n    my %word_count;\n    foreach",
        "# R: Data Frame Operations\ncalculate_stats <- function(data) {\n    result <- data.frame(\n        mean = apply(data, 2, mean),\n        sd = apply(data, 2, sd),\n        median",
        "-- Haskell: List Comprehension\nquicksort :: Ord a => [a] -> [a]\nquicksort [] = []\nquicksort (x:xs) =\n    quicksort [y | y <- xs, y <= x] ++\n    [x] ++\n    quicksort [y |",
        "# Elixir: Pipeline Operator\ndefmodule StringTransform do\n  def process(text) do\n    text\n    |> String.downcase()\n    |> String.split()\n    |> Enum.uniq()\n    |> Enum",
        "-- Lua: Coroutine Example\nfunction producer()\n    for i = 1, 5 do\n        coroutine\n\nco = coroutine.create",
        "// Dart: Future and Async\nFuture<List<String>> fetchData() async {\n  try {\n    final response = await http.get(Uri.parse('https://api.example.com/data'));\n    return jsonDecode(response.body);\n  } catch",
        "// Groovy: Builder Pattern\ndef xml = new MarkupBuilder()\nxml",
        "# Julia: Matrix Operations\nfunction matrix_operations(A::Matrix)\n    eigenvalues = eigvals(A)\n    determinant = det(A)\n    inverse = inv",
        "# Python: Context Manager\nclass DatabaseConnection:\n    def __enter__(self):\n        self.conn = connect_to_db()\n        return self.conn\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.conn",
        "// JavaScript: Promise Chain\nfunction processData(data) {\n    return Promise.resolve(data)\n        .then(validate)\n        .then(transform)\n        .then(save)\n        .catch(handleError",
        "// C#: LINQ Query\nvar result = from p in people\n            where p.Age > 18\n            group p by p.City into g\n            select new",
        "// Java: Stream API\nList<Integer> result = numbers.stream()\n    .filter(n -> n % 2 == 0)\n    .map(n -> n * 2)\n    .collect(Collectors",
        "# Ruby: Metaprogramming\nclass String\n  def method_missing(method_name)\n    self.send(method_name.to_s.gsub('to_', ''))\n  rescue NoMethodError\n    super",
        "# Python: Fractal Generator\ndef generate_mandelbrot(max_iter):\n    def escape_time(c):\n        z = 0\n        for n in range(max_iter):\n            if abs(z) > 2:\n                return n\n            z = z*z + c\n        return max_iter\n    dimensions = range(-20, 20)\n    return [[escape_time(complex(x/10, y/10))\n             for x in dimensions]\n            for y in dimensions] @",
        "// C++: Template Metaprogramming\ntemplate<unsigned n>\nstruct Factorial {\n    static const unsigned value = n * Factorial<n-1>::value;\n};\n\ntemplate<>\nstruct Factorial<0> {\n    static const unsigned",
        "// Rust: Error Handling\nfn divide(a: i32, b: i32) -> Result<i32, String> {\n    if b == 0 {\n        Err(String::from(\"Division by zero\"))\n    } else {\n        Ok",
        "// Go: Concurrent Map\ntype ConcurrentMap struct {\n    sync.RWMutex\n    items map[string]interface{}\n}\n\nfunc (m *ConcurrentMap) Set(key string, value interface{}) {\n    m.Lock()\n    defer m.Unlock()\n    m.items[key] = concat",
        "// Kotlin: Sealed Class\nsealed class Result<out T> {\n    data class Success<T>(val data: T) : Result<T>()\n    data class Error(val message: String) : Result<Nothing>()\n    tensor",
        "// Scala: Implicit Conversion\nimplicit class StringOps(s: String) {\n    def toIntOption: Option[Int] = {\n        try {\n            Some(s.toInt)\n        } catch {\n            case _: zeros",
        "// TypeScript: Decorator\nfunction log(target: any, propertyKey: string) {\n    let value = target[propertyKey];\n\n    const getter = () => {\n        console.log(`Getting: ${propertyKey}`);\n        return value;\n    };\n\n    const setter = (newVal: any) => {\n        console.log(`Setting: ${propertyKey} = ${newVal}`);\n        value = newVal;\n    };\n\n    Object.defineProperty(target, propertyKey, {\n        get: getter,\n        set: setter,\n        enumerable: true,\n        ones",
        "# Elixir: GenServer\ndefmodule Counter do\n  use GenServer\n\n  def init(init_val) do\n    {:ok, init_val}\n  end\n\n  def softmax",
        "// Swift: Result Type\nenum NetworkError: Error {\n    case invalidURL\n    case noData\n    case decodingError\n}\n\nfunc fetchData() -> Result<Data, NetworkError",
        "# Perl: Regular Expression\nsub extract_emails {\n    my $text = shift;\n    my @emails = $text =~ /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g;\n    return \\@emails",
        "create_plot <- function(data) {\n    ggplot(data, aes(x = x, y = y)) +\n        geom_point() +\n        geom_smooth(method = \"lm\") +\n        theme_minimal",
        "-- Haskell: Monad Example\ndata Maybe a = Nothing | Just a\n\ninstance Monad Maybe where\n    return x = Just x\n    Nothing >>= f = Nothing\n    (Just min",
        "# Python: Asynchronous Context Manager\nclass AsyncResource:\n    async def __aenter__(self):\n        await self.open()\n        return self\n\n    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        await self.close",
        ";; Clojure: Higher-order Functions\n(defn compose [f g]\n  (fn [x]\n    (f (g x))))\n\n(def square-then-inc\n  (compose inc",
        "// F#: Pattern Matching with Active Patterns\nlet (|Even|Odd|) n =\n    if n % 2 = 0 then Even else Odd\n\nlet describe = function\n    | Even -> \"even number\"\n    | Odd",
        "% Erlang: Actor Model\n-module(calculator).\n-export([start/0, add/2]).\n\nstart() ->\n    spawn(fun() -> loop() end).\n\nloop() ->\n    receive\n        {From, {add, A, B}} ->\n            From ! {result, A + B},\n\n        np.detach",
        "(* OCaml: Algebraic Data Types *)\ntype shape =\n  | Circle of float\n  | Rectangle of float * float\n  | Triangle of float * float * float\n\nlet area = function\n  | Circle r -> 3.14159 *. r *. r\n  | Rectangle (w, h) -> w *. h\n  | Triangle (a, b, c) ->\n      let s = (a +. b +. c) /. 2.0 in\n      sqrt",
        "# Nim: Macros\nmacro debug(n: varargs[untyped]): untyped =\n  result = newNimNode(nnkStmtList)\n  for i in 0..n.len-1:\n    result.add(newCall(\"echo\", newLit(n[i].repr",
        "# Crystal: Channel Communication\nchannel = Channel(Int32).new\n\nspawn do\n  5.times do |i|\n    channel.send(i)\n  end\nend\n\n5.times do\n  received = channel.receive\n  puts outputs",
        "// D: Template Constraints\nT[][] transpose(T)(T[][] matrix)\nif (isNumeric!T)\n{\n    auto result = new T[][](matrix[0].length, matrix.length);\n    foreach (i; 0..matrix.length)\n        foreach (j; 0..matrix[0].length)\n            result[j][i] = matrix[i][j];\n    return strip",
        "-- Elm: Type Aliases and Records\ntype alias User =\n    { name : String\n    , age : Int\n    , email : Maybe String\n    }\n\nupdateEmail : String -> User -> User\nupdateEmail newEmail user =\n    { user | email = Just newEmail",
        "// Zig: Error Union Type\nfn readNumber(str: []const u8) !u32",
        "# Julia: Multiple Dispatch\nstruct Point\n    x::Float64\n    y::Float64\nend\n\nstruct Circle\n    center::Point\n    radius::Float64\nend\n\nfunction distance(p1::Point, p2::Point)\n    sqrt((p1.x - p2.x)^2 + (p1.y - p2.y)^2)\nend\n\nfunction contains(c::Circle, p::Point",
        "% Prolog: Logic Programming\nancestor(X, Y) :- parent(X, Y).\nancestor(X, Y) :-\n    parent(X, Z),\n    ancestor(Z, Y).\n\nparent(john, mary).\nparent",
        "-- Lua: Metatables\nlocal mt = {\n    __add = function(a, b)\n        return setmetatable({\n            x = a.x + b.x,\n            y = a.y + b.y\n        }, mt)\n    end,\n    __tostring",
        "#lang racket\n; Racket: Macro Definition\n(define-syntax-rule (while condition body ...)\n  (let loop ()\n    (when",
        "// Dart: Mixins\nmixin Musical {\n  bool canPlayPiano = false;\n  bool canCompose = false;\n\n  void entertainMe() {\n    if (canPlayPiano) {\n      print('Playing piano');\n    }\n    if(canCompose",
        "// Rust: Smart Pointers\nstruct CustomSmartPointer {\n    data: String,\n}\n\nimpl Drop for CustomSmartPointer {\n    fn drop(&mut",
        "// Kotlin: Coroutines\nsuspend fun fetchUserData(): User = coroutineScope {\n    val deferred1 = async { fetchUserProfile() }\n    val deferred2 = async { fetchUserPreferences() }\n\n    User(\n        profile = deferred1.await(),\n        preferences = deferred2.await(",
        "// Scala: Type Classes\ntrait Show[A] {\n  def show(a: A): String\n}\n\nobject Show {\n  def apply[A](implicit sh: Show[A]): Show[A] = sh\n\n  implicit val intShow: Show[Int] = new Show[Int] {\n    def show(n: Int): String = n.toString",
        "# Elixir: Protocols\ndefprotocol Size do\n  def size(data)\nend\n\ndefimpl Size, for: BitString do\n  def size(string), do: byte_size(string)\nend\n\ndefimpl Size, for: Map do\n  def",
        "-- PureScript: Effect Handling\nforeign import data DOM :: Effect\n\nmoveElement :: String -> Int -> Int -> Eff (dom :: DOM) Unit\nmoveElement elementId x y = do\n  element <- getElementById elementId",
        "/* ReasonML: Pattern Matching with Options */\ntype person = {\n  name: string,\n  age: option(int)\n};\n\nlet describe = (person) =>\n  switch (person.age) {\n  | None",
        "-- Idris: Dependent Types\nvect : Nat -> Type -> Type\ndata Vect : Nat -> Type -> Type where\n  Nil  : Vect Z a\n  (::) : a -> Vect k a -> Vect (S k) a\n\nappend : Vect n a -> Vect m a -> void",
        "-- Ada: Strong Typing and Contracts\npackage Stack is\n   type Stack_Type is private;\n\n   procedure Push (S : in out Stack_Type; Item : in Integer)\n     with Pre => not Is_Full(S),\n          Post => not Is_Empty(S);\n\n   function Is_Empty (S : Stack_Type) return Boolean;\n   function Is_Full (S : Stack_Type) return Boolean;\nprivate\n   Max_Size : constant := 100;\n   type Stack_Type is record\n      Items  : array (1 .. Max_Size) of Integer;\n      Top    : Natural := 0;\n   end record;\nend Stack",
        "// Rust: Zero-Cost Abstractions\nstruct Wrapper<T>(T);\n\nimpl<T> Wrapper<T> {\n    fn map<U, F: FnOnce(T) -> U>(self, f: F) -> Wrapper<U> {\n        Wrapper(LinkedList",
        "-- Haskell: Type Classes and Functors\nclass Bifunctor f where\n    bimap :: (a -> b) -> (c -> d) -> f a c -> f b d\n\ninstance Bifunctor Either where\n    bimap f _ (Left x)  = Left (f x)\n    bimap",
        "(* OCaml: Modules and Functors *)\nmodule type RING = sig\n  type t\n  val zero : t\n  val one : t\n  val (+) : t -> t -> t\n  val ( * ) : t -> t -> t\nend\n\nmodule IntRing : RING with type t = int = struct",
        "# Python: Type Hints and Protocols\nfrom typing import Protocol, Iterator\n\nclass Iterable(Protocol):\n    def __iter__(self) -> Iterator:\n        ...\n\ndef process_items(items: Iterable) -> None:\n    for item in items:\n        print",
        "// F#: Units of Measure\n[<Measure>] type m\n[<Measure>] type s\n[<Measure>] type kg\n\nlet gravity = 9.81<m/s^2>\nlet mass = 10.0<kg>\nlet",
        "# Elixir: Behaviours and Applications\ndefmodule MyApp do\n  use Application\n\n  def start(_type, _args) do\n    children = [\n      {MyApp.Worker, []},\n      {MyApp.Cache",
        "# Python: REST API with FastAPI\nfrom fastapi import FastAPI, HTTPException\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\nclass User(BaseModel):\n    id: int\n    name: str\n    email: str\n    active: bool = True\n\nusers = {}\n\n@app.post(\"/users/\")\nasync def create_user(user: User):\n    if user.id in users:\n        raise HTTPException(status_code=400, detail=\"User already exists\")\n    users[user.id] = user\n    return user\n\n@app.get(\"/users/{user_id}\")\nasync def get_user(user_id: int):\n    if user_id not in users:\n        raise HTTPException",
        "// JavaScript: React Component with Hooks\nimport React, { useState, useEffect } from 'react';\n\nconst UserProfile = ({ userId }) => {\n    const [user, setUser] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        const fetchUser = async () => {\n            try {\n                setLoading(true);\n                const response = await fetch(`/api/users/${userId}`);\n                const data = await response.json();\n                setUser(data);\n            } catch (err) {\n                setError(err.message);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchUser();\n    }, [userId]);\n\n    if (loading) return <div>Loading...</div>;\n    if (error) return <div>Error: {error}</div>;\n\n    return (\n        <div className=\"user-profile\">\n            <h2>{user.name}</h2>\n            <p>Email: {user.email}</p>\n            <p>Status: {user.active ? 'Active' : 'Inactive'}</p>\n        </div",
        "// Java: Spring Boot REST Controller\n@RestController\n@RequestMapping(\"/api/products\")\npublic class ProductController {\n\n    private final ProductService productService;\n\n    @Autowired\n    public ProductController(ProductService productService) {\n        this.productService = productService;\n    }\n\n    @GetMapping\n    public ResponseEntity<List<Product>> getAllProducts(\n            @RequestParam(required = false) String category,\n            @RequestParam(defaultValue = \"0\") int page,\n            @RequestParam(defaultValue = \"10\") int size) {\n\n        Pageable pageable = PageRequest.of(page, size);\n        List<Product> products = productService.findProducts(category, pageable);\n\n        return ResponseEntity.ok(products);\n    }\n\n    @PostMapping\n    public class",
        "// TypeScript: Generic State Management\ninterface State<T> {\n    data: T | null;\n    loading: boolean;\n    error: string | null;\n}\n\nclass StateManager<T> {\n    private state: State<T>;\n    private listeners: Set<(state: State<T>) => void>;\n\n    constructor() {\n        this.state = {\n            data: null,\n            loading: false,\n            error: null\n        };\n        this.listeners = new Set();\n    }\n\n    subscribe(listener: (state: State<T>) => void): () => void {\n        this.listeners.add(listener);\n        return () => this.listeners.delete(listener);\n    }\n\n    async fetchData(api: () => Promise<T>): Promise<void> {\n        this.updateState({ ...this.state, loading: true });\n        try {\n            const data = await api();\n            this.updateState({ data, loading: false, error: null });\n        } catch (error) {\n            this.updateState({\n                data: null,\n                loading: false,\n                error: error",
        "// PHP: Laravel Controller with Validation\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Order;\nuse App\\Http\\Requests\\OrderRequest;\nuse Illuminate\\Http\\JsonResponse;\n\nclass OrderController extends Controller\n{\n    public function store(OrderRequest $request): JsonResponse\n    {\n        $validated = $request->validated();\n\n        $order = Order::create([\n            'user_id' => auth()->id(),\n            'product_id' => $validated['product_id'],\n            'quantity' => $validated['quantity'],\n            'total_price' => $this->calculatePrice(\n                $validated['product_id'],\n                $validated['quantity']\n            )\n        ]);\n\n        return response()->json([\n            'message' => 'Order created successfully',\n            'order' => $order->load('product')\n        ], 201);\n    }\n\n    private function calculatePrice(int $productId, int $quantity): float\n    {\n        $product = Product::findOrFail($productId);\n        return $product->price * $quant",
        "// C#: Entity Framework Core with LINQ\npublic class ProductService : IProductService\n{\n    private readonly ApplicationDbContext _context;\n    private readonly ILogger<ProductService> _logger;\n\n    public ProductService(\n        ApplicationDbContext context,\n        ILogger<ProductService> logger)\n    {\n        _context = context;\n        _logger = logger;\n    }\n\n    public async Task<IEnumerable<ProductDto>> GetProductsByCategory(\n        string category,\n        int skip = 0,\n        int take = 10)\n    {\n        try\n        {\n            var products = await _context.Products\n                .Where(p => p.Category == category && p.IsActive)\n                .Skip(skip)\n                .Take(take)\n                .Select(p => new ProductDto\n                {\n                    Id = p.Id,\n                    Name = p.Name,\n                    Price = p.Price,\n                    Description = p.Description,\n                    StockCount = p.StockCount\n                })\n                .ToListAsync();\n\n            return products;\n        }\n        catch (Exception ex)\n        {\n            _logger",
        "// JavaScript: Express.js Middleware and Error Handling\nconst express = require('express');\nconst jwt = require('jsonwebtoken');\n\nconst authMiddleware = (req, res, next) => {\n    const token = req.headers.authorization?.split(' ')[1];\n\n    if (!token) {\n        return res.status(401).json({ message: 'No token provided' });\n    }\n\n    try {\n        const decoded = jwt.verify(token, process.env.JWT_SECRET);\n        req.user = decoded;\n        next();\n    } catch (error) {\n        return res.status(401).json({ message: 'Invalid token' });\n    }\n};\n\nconst errorHandler = (err, req, res, next) => {\n    console.error(err.stack);\n\n    if (err.name === 'ValidationError') {\n        return res.status(400).json({\n            message: 'Validation Error',\n            errors: err.errors\n        });\n    }\n\n    res.status(500).json",
        "# Python: SQLAlchemy ORM with Async Support\nfrom sqlalchemy.ext.asyncio import AsyncSession\nfrom sqlalchemy.future import select\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.sql import func\n\nclass User(Base):\n    __tablename__ = 'users'\n\n    id = Column(Integer, primary_key=True)\n    email = Column(String, unique=True, nullable=False)\n    created_at = Column(DateTime, server_default=func.now())\n    orders = relationship('Order', back_populates='user')\n\nclass UserRepository:\n    def __init__(self, session: AsyncSession):\n        self.session = session\n\n    async def get_user_with_orders(self, user_id: int) -> Optional[User]:\n        query = select(User).options(\n            joinedload(User.orders)\n        ).filter(User.id == user_id)\n\n        result = await self.session.execute(query)\n        return result.scalar_one_or_none()\n\n    async def create_user(self, email: str",
        "# Ruby: Rails API Controller with Caching\nclass Api::V1::ArticlesController < ApplicationController\n  include ActionController::Caching\n\n  before_action :authenticate_user!\n  after_action :verify_authorized\n\n  def index\n    articles = Rails.cache.fetch(\"articles/#{params[:category]}\", expires_in: 1.hour) do\n      Article.includes(:author, :comments)\n            .where(category: params[:category])\n            .page(params[:page])\n            .per(20)\n            .to_a\n    end\n\n    authorize articles\n\n    render json: ArticleSerializer.new(articles, {\n      include: [:author, :comments],\n      meta: {\n        total_pages: articles.total_pages,\n        current_page: articles.current_page\n      }\n    })\n  end\n\n  def create\n    article = Article.new(article_params)\n    article.author = current_user\n\n    authorize article\n\n    if article.save\n      Rails.cache.delete(\"articles/#{article.category}\")\n      render json: ArticleSerializer.new(article), status: :created\n    else",
        "// Rust: Binary Tree Implementation\nstruct Node<T> {\n    value: T,\n    left: Option<Box<Node<T>>>,\n    right: Option<Box<Node<T>>>\n}\n\nimpl",
        "// Kotlin: Extension Function\nfun String.isPalindrome(): Boolean {\n    val",
        "// Go: Concurrent Map Access\ntype ConcurrentMap struct {\n    sync.RWMutex\n    items map[string]interface{}\n}\n\nfunc (m *ConcurrentMap) Set(key",
        "// Scala: Pattern Matching\ndef describe(x: Any): String = x match {\n    case i: Int if i > 0 => \"positive number\"\n    case 0 => \"zero\"\n    case s: String => s\"string: $s\"\n    case",
        "# Python: Decorator with Parameters\ndef retry(max_attempts: int, delay: float = 1.0):\n    def decorator(func):\n        @wraps(func)\n        async def wrapper(*args, **kwargs):\n            for attempt in range(max_attempts):\n                try:\n                    return await func(*args, **kwargs)\n                except Exception as e:\n                    if attempt == max_attempts - 1:\n                        raise\n                    await asyncio.sleep(delay)\n            return None\n        return wrapper\n    return decorator",
        "# Ruby: Module Mixin\nmodule Loggable\n  def log(message)\n    puts \"[#{Time.now}] #{self.class.name}: #{message}\"\n  end\nend\n\nclass UserService\n  include",
        "// Swift: Protocol with Associated Type\nprotocol Container {\n    associatedtype Item\n    mutating func append(_ item: Item)\n    var count: Int { get }\n    subscript(i: Int) -> Item { get }\n}\n\nstruct Stack<Element>: Container {\n    var items = [Element]()\n\n    mutating func append(_ item: Element) {\n        items.append",
        "# Elixir: GenServer Implementation\ndefmodule Cache do\n  use GenServer\n\n  def start_link(opts \\\\ []) do\n    GenServer.start_link(__MODULE__, %{}, opts)\n  end\n\n  def init(state) do\n    {:ok, state}\n  end\n\n  def handle_call({:get, key}, _from, state) do\n    {:reply, Map.get(state, key), state}\n  end\n\n  def handle_cast({:put, key, value}, state) do\n    {:noreply",
        "// C++: Template Metaprogramming\ntemplate<unsigned n>\nstruct Fibonacci {\n    static constexpr unsigned value =\n        Fibonacci<n-1>::value + Fibonacci<n-2>::value;\n};\n\ntemplate<>\nstruct Fibonacci<0> {\n    static constexpr unsigned value = 0;\n};\n\ntemplate<>\nstruct Fibonacci<1> {\n    static constexpr",
        "// TypeScript: Advanced Type Utilities\ntype DeepReadonly<T> = {\n    readonly [P in keyof T]: T[P] extends object\n        ? DeepReadonly<T[P]>\n        : T[P]\n}\n\ninterface User {\n    id: number;\n    name: string;\n    settings: {\n        theme: string;\n        notifications: boolean",
        "-- Haskell: Monadic Operations\ndata Maybe a = Nothing | Just a\n\ninstance Monad Maybe where\n    return x = Just x\n    Nothing >>= _ = Nothing\n    (Just x) >>= f = f x\n\nsafeDiv :: Int -> Int -> Maybe Int\nsafeDiv _ 0 = Nothing\nsafeDiv",
        "# Perl: Regular Expression Processing\nuse strict;\nuse warnings;\n\nsub",
        "// Java: Reactive Stream Processing\npublic class ReactiveProcessor {\n    private final Flux<String> messageStream;\n\n    public ReactiveProcessor(MessageSource source) {\n        this.messageStream = Flux.from(source)\n            .filter(msg -> !msg.isEmpty())\n            .map(String::toLowerCase)\n            .distinct()\n            .onErrorContinue((err, obj",
        "# Python: Async Context Manager\nclass AsyncResource:\n    async def __aenter__(self):\n        await self.open()\n        return self\n\n    async def __aexit",
        "# R: Data Frame Operations\nlibrary(dplyr)\n\nprocess_data <- function(df) {\n    df %>%\n        group_by(category) %>%\n        summarise(\n            mean_value = mean(value, na.rm = TRUE),\n            std_dev = sd(value, na.rm = TRUE)\n        ) %>%\n        filter(mean_value > 0) %>%\n        arrange(desc\n}",
        "// JavaScript: Proxy Object\nconst handler = {\n    get: function(target, prop) {\n        return prop in target\n            ? target[prop]\n            : new Proxy({}, handler);\n    }\n};\n\nconst deepObject = new Proxy({}, eventHandler",
        "-- Lua: Metatables\nlocal mt = {\n    __add = function(a, b)\n        return setmetatable({\n            x = a.x + b.x,\n            y = a.y + b.y\n        }, mt)\n    end,\n    __tostring = function(v)\n        return string.format",
        "// Dart: Stream Transformation\nStream<int> transformNumbers(Stream<String> input) {\n  return input\n    .where((str) => str.isNotEmpty)\n    .map(int.parse",
        "// F#: Pattern Matching with Active Patterns\nlet (|Even|Odd|) n =\n    if n % 2 = 0 then Even else Odd\n\nlet describe = function\n    | Even -> \"even number\"\n    | Odd -> \"odd number\"",
        "// Groovy: Builder Pattern\ndef html = new MarkupBuilder()\nhtml.html {\n    head",
        "# Julia: Multiple Dispatch\nstruct Point{T<:Number}\n    x::T\n    y::T\nend\n\nfunction distance(p1::Point",
        "// PHP: Attribute Usage\n#[Route(\"/api/users/{id}\", methods: [\"GET\"])]\nclass UserController\n{\n    #[Inject]\n    private UserRepository $repository;\n\n    public function getUser(#[PathParam] int $id): Response\n    {\n        return new JsonResponse(\n            $this->repository",
        ";; Clojure: Macro Definition\n(defmacro unless [pred & body]\n  `(when (not ~pred)\n     ~@body))\n\n(defn",
        "# Crystal: Channel Communication\nchannel = Channel(String).new\n\nspawn do\n  5.times do |i|\n    channel.send \"Message #{i}\"\n    sleep 0.1\n  end\nend\n\n5.times do\n  message = channel.recei",
        "# Nim: Generic Type Constraints\ntype\n  Container[T: SomeNumber] = object\n    data: seq[T]\n    capacity: int\n\nproc",
        "(* OCaml: Functor Implementation *)\nmodule type Container = sig\n  type 'a t\n  val empty : 'a t\n  val add : 'a -> 'a t -> 'a t\n  val member : 'a -> 'a t -> bool\nend\n\nmodule",
        "// Pascal: Object-Oriented Programming\ntype\n  TShape = class\n  private\n    FColor: string;\n  public\n    constructor Create(AColor: string);\n    function GetArea: Double; virtual; abstract;\n  end;\n\n  TCircle = class(TShape)\n  private\n    FRadius: Double;\n  public\n    constructor Create(AColor: string; ARadius: Double",
        "#lang racket\n; Racket: Macro System\n(define-syntax-rule (repeat n body ...)\n  (for ([i (range n)])\n    body ...))\n\n(define (test-repeat)\n  (repeat 3\n    (displayln \"Hello\")\n    (displayln",
        "// Rust: Async/Await Implementation\nasync fn process_data(data: Vec<u8>) -> Result<String, Error> {\n    let client = Client::new();\n    let response = client\n        .post(\"https://api.example.com/data\")\n        .body(data)\n        .send()\n        .await?;\n\n    Ok(resp",
        "// Scala: Type Classes\ntrait Showable[A] {\n  def show(a: A): String\n}\n\nobject Showable {\n  implicit val intShowable: Showable[Int] =\n    new Showable[Int] {\n      def show(n: Int): String = n.toString\n    }\n\n  implicit val boolShowable",
        "// TypeScript: Mapped Types\ntype Nullable<T> = {\n    [P in keyof T]: T[P] | null;\n};\n\ninterface User {\n    id: number;\n    name: string;\n    email: string;\n}\n\ntype NullableUser",
        "// Verilog: Sequential Logic\nmodule counter(\n    input wire clk,\n    input wire reset,\n    output reg [3:0] count\n);\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            count <= 4'b0000;\n        else\n            count <= count + 1;\n    end\nendmodule",
        "% Erlang: Actor Model\n-module(calculator).\n-export([start/0, add/2]).\n\nstart() ->\n    spawn(fun() -> loop(0) end).\n\nloop(Sum) ->\n    receive\n        {add, Number} ->\n            loop(Sum + Number);\n        {get_sum, Pid} ->\n            Pid",
        "! Fortran: Numerical Computing\nSUBROUTINE matrix_multiply(A, B, C, n)\n    IMPLICIT NONE\n    INTEGER, INTENT(IN) :: n\n    REAL, INTENT(IN) :: A(n,n), B(n,n)\n    REAL, INTENT(OUT) :: C(n,n)\n    INTEGER :: i, j, k\n\n    DO i = 1, n\n        DO j = 1, n\n            C(i,j) = 0.0\n            DO k = 1, n\n                C(i,j) = C(i,j) + A(i,k) * B(k,j)\n            END DO\n        END DO\n    END DO\nEND SUBROUTINE"
    ]
}