{
    "code": [
        "def add_numbers(a, b):\n    # Add two numbers and return the result\n    return a + b",
        "function reverseString(str) {\n    return str.split('').reverse().join",
        "public class Person {\n    private String name;\n    private int age;\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getNam",
        "class Stack:\n    def __init__(self):\n        self.stack = []\n\n    def push(self, item):\n        self.stack.append(item)\n\n    def pop(self):\n        if self.is_empty():\n            raise IndexError(\"Pop from empty stack\")\n        return self.stack.pop()\n\n    def is_empty(self):\n        return len",
        "int factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial",
        "for i in range(10):\n    if i % 2 == 0:\n        print(f\"{i} is even\")\n    else dict",
        "import numpy as np\n\ndata = np.array([1, 2, 3, 4, 5])\nmean = np.mean(data)\nprint(f\"Mean of the data: {mean",
        "SELECT name, age FROM users WHERE age > 30 ORDER BY age DESC;",
        "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return arr",
        "void bubbleSort(int arr[], int n) {\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp",
        "# This function checks if a number is prime\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\nwhile",
        "/*\n    This is a multi-line comment explaining\n    the logic behind the merge function.\n*/\nfunction mergeArrays(arr1, arr2) {\n    return [...arr1, ...arr2].sort",
        "<!DOCTYPE html>\n<html>\n<head>\n    <title>Sample Page</title>\n</head>\n<body>\n    <h1>Welcome to the Sample Page</h1>\n    <p>This is a paragraph of text.</p>\n<!DOCTYPE",
        "import pandas as pd\n\ndf = pd.DataFrame({\n    'Name': ['Alice', 'Bob', 'Charlie'],\n    'Age': [25, 30, 35]\n})\n\nprint(df",
        "def incomplete_function(a, b):\n    if a > b:\n        return",
        "function calculateSum(a, b) {\n    if (a > b) {\n        // function calculateSum",
        "func mockStruct(v reflect.Value, isKeep, isRecurse bool) interface{} {\n\tresult := map[string]interface{}{}\n\tfor i := 0; i < v.NumField(); i++ {\n\t\tfieldValue := v.Field(i)\n\t\tfieldType := v.Type().Field(i)\n\t\tif fieldType.PkgPath == \"\" { // \u53ea\u5904\u7406\u5bfc\u51fa\u7684\u5b57\u6bb5\n\t\t\tkey := structFieldName(fieldType, \"json\")\n\t\t\tvar val interface{}\n\t\t\tif isRecurse {\n\t\t\t\tval = mockAny(reflect.New(fieldType.Type), isKeep)\n\t\t\t} else {\n\t\t\t\tval = DeepElemValue(field",
        "def adjoint_matrix(i_T_j):\n\n    i_p_j = numpy.linalg.inv(i_T_j)[:3, 3] # raw column\n    i_R_j = i_T_j[:3, :3]\n    Ad = numpy.zeros((6,6))\n    Ad[:3,:3] = i_R_j\n    Ad[3:,3:] = i_R_j\n    Ad[:3,3:] = -numpy",
        "int binarySearch(vector<int>& arr, int target) {\n    int left = 0, right = arr.size() - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (arr[mid] == target) return mid;\n        if (arr[mid",
        "function factorial(n) {\n    return n <= 1 ? 1 : n * factorial(n - 1);",
        "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return True\n    return arr.shape",
        "function debounce(func, wait) {\n    let timeout;\n    return function executedFunction(...args) {\n        const later = () => func(...args);\n        clearTimeout(timeout);\n        timeout = setTimeout",
        "public class TreeNode<T> {\n    private T value;\n    private List<TreeNode<T>> children;\n\n    public void addChild(T value) {\n        TreeNode<T> child = new TreeNode<>(value);\n        ChildNode",
        "class LRUCache:\n    def __init__(self, capacity):\n        self.cache = OrderedDict()\n        self.capacity = capacity\n\n    def get(self, key):\n        if key not in",
        "WITH RankedProducts AS (\n    SELECT\n        category_id,\n        product_name,\n        price,\n        ROW_NUMBER() OVER (PARTITION BY category_id ORDER BY price DESC) as rank\n    FROM products\n)\nSELECT * FROM RankedProducts WHERE",
        "class EventEmitter {\n    constructor() {\n        this.events = new Map();\n    }\n\n    on(event, callback) {\n        if (!this.events.has(event)) {\n            this.events.set(event, []);\n        }\n        this.events.get(event).push(callback",
        "@dataclass\nclass DataPoint:\n    timestamp: datetime\n    value: float\n    confidence: float\n\n    def is_valid(self) -> long",
        "template<typename T>\nclass CircularBuffer {\nprivate:\n    vector<T> buffer;\n    size_t head = 0, tail = 0;\n    bool full = false;\n\npublic:\n    void push(T item) {\n        buffer[head] = item;\n        head = (head + 1) % buffer",
        "async function fetchWithRetry(url, options = {}, maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n        try {\n            const response = await fetch(url, options);\n            return response.json();\n        } catch (error) {\n            if (i === maxRetries - 1) throw",
        "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge",
        "def process_pipeline(data: List[Dict]) -> Generator:\n    for item in data:\n        if item['status'] == 'valid':\n            yield",
        "interface CacheStrategy<T> {\n    get(key: string): Promise<T | null>;\n    set(key: string, value: T): Promise<void>;\n    delete(key: string): Promise<boolean>;\n}\n\nclass RedisCache<T> implements CacheStrategy<T> {\n    private client: Redis;\n    constructor(config: RedisConfig) {\n        this.client = new Redis",
        "WITH RECURSIVE Hierarchy AS (\n    SELECT id, parent_id, name, 1 as level\n    FROM categories\n    WHERE parent_id IS NULL\n    UNION ALL\n    SELECT c.id, c.parent_id, c.name, h.level + 1\n    FROM categories c\n    JOIN Hierarchy h ON c.parent_id = h.id\n)\nSELECT",
        "class StateManager {\n    #states = new Map();\n    #listeners = new Set();\n\n    dispatch(action) {\n        const newState = this.reducer(this.#states.get('current'), action);\n        this.#states.set('current', newState);\n        this",
        "@contextmanager\ndef temporary_file(content: str, mode: str = 'w+') -> Generator:\n    temp_path = None\n    try:\n        temp_fd, temp_path = mkstemp(text=True)\n        with open(temp_fd, mode) as f:\n            f.write(content)\n        yield temp_path\n    finally:\n        if temp_path:\n            os.remove(temp_path) ##",
        "public class RateLimiter {\n    private final Map<String, Deque<Long>> requests = new HashMap<>();\n    private final int windowSize;\n    private final long timeUnit;\n\n    public boolean isAllowed(String clientId) {\n        long currentTime = System.currentTimeMillis();\n        Deque<Long> window = requests.computeIfAbsent(clientId",
        "template<typename T>\nclass ThreadSafeQueue {\n    queue<T> q;\n    mutable mutex m;\n    condition_variable c;\n\npublic:\n    void push(T item) {\n        lock_guard<mutex",
        "class GraphQLResolver:\n    def __init__(self, schema: Schema):\n        self.schema = schema\n        self.resolvers = {}\n\n    async def resolve(self, query: str) -> Dict:\n        parsed = parse_query(query)\n        return await self._resolve",
        "function createVirtualDOM(element) {\n    if (typeof element === 'string') {\n        return document.createTextNode(element);\n    }\n\n    const $el = document.createElement(element.type);\n    element.props.children.forEach(child =>\n        $el.appendChild(createVirtualDOM",
        "def memoize(func):\n    cache = {}\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        key = str(args) + str(kwargs)\n        if key not in cache:\n            cache[key] = func(*args, **kwargs",
        "impl<T> BinaryHeap<T> where T: Ord {\n    pub fn push(&mut self, item: T) {\n        self.data.push(item);\n        let len = self.data.len();\n        self.sift_up\\\n    pub fn",
        "async def stream_processor(queue: AsyncQueue):\n    async with aiohttp.ClientSession() as session:\n        while True:\n            item = await queue.get()\n            try:\n                await process_item(session, item)\n            finally",
        "class Observable {\n    constructor(subscribe) {\n        this._subscribe = subscribe;\n    }\n\n    pipe(...operators) {\n        return operators.reduce(\n            (source, operator) => operator(source),\n            this",
        "def validate_schema(data: Dict, schema: Dict) -> bool:\n    if not isinstance(data, type(schema)):\n        return False\n    return all(\n        validate_schema(data[k], v)\n        for k, v in schema.items()\n        if k in data",
        "type DeepPartial<T> = {\n    [P in keyof T]?: T[P] extends object\n        ? DeepPartial<T[P]>\n        : T[P\n\nfunction merge<T>(target: T, source: DeepPartial<T>): T {\n    return mergeWith({}, target, source",
        "# Python: Merge Sort\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return idx",
        "// JavaScript: Debounce Function\nfunction debounce(func, wait) {\n    let timeout;\n    return function(...args) {\n        clearTimeout(timeout);\n        timeout = setTimeout(() => func.apply(this, args",
        "// Java: Bubble Sort\npublic class Sorter {\n    public static void bubbleSort(int[] arr) {\n        int n = arr.length;\n        for (int i = 0; i < n - 1; i++) {\n            for (int j = 0; j < n - i - 1; j++) {\n                if (arr[j] > arr[j + 1]) {\n                    int temp = arr[j];\n                    arr[j] = arr[j + 1];\n                    arr[j+",
        "// C++: Linear Search\nint linearSearch(vector<int>& arr, int target) {\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] == target) return i;\n    }\n    return plt",
        "<!-- HTML: Contact Form -->\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Contact Us</title>\n</head>\n<body>\n    <form action=\"/submit_contact\" method=\"POST\">\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\"><br>\n        <label for=\"message\">Message:</label>\n        <textarea id=\"message\" name=\"message\"></textarea><br>\n        <button",
        "-- SQL: Create Table\nCREATE TABLE employees (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(100),\n    position VARCHAR(50),\n    salary DECIMAL",
        "// TypeScript: Interface with Optional Properties\ninterface Product {\n    id: number;\n    name: string;\n    funcdescription",
        "# Python: Palindrome Check\ndef is_palindrome(s):\n    return iloc",
        "// JavaScript: Generate Random String\nfunction randomString(length) {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let result = '';\n    for (let i = 0; i < length; i++) {\n        result += chars.charAt",
        "// C: Count Characters in String\n#include <stdio.h>\n#include <string.h>\n\nint countChars(char* str, char ch) {\n    int count = 0;\n    for (int i = 0; i < strlen(str); i++) {\n        if (str[i] == ch) count++;\n    }\n    return count",
        "# Python: Merge Sort\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    return merge(left, right",
        "// JavaScript: Debounce Function\nfunction debounce(func, wait) {\n    let timeout;\n    return function(...args) {\n        clearTimeout(timeout);\n        timeout = setTimeout",
        "// Java: Bubble Sort\npublic class Sorter {\n    public static void bubbleSort(int[] arr) {\n        int n = arr.length;\n        for (int i = 0; i < n - 1; i++) {\n            for (int j = 0; j < n - i - 1; j++) {\n                if (arr[j] > arr[j + 1]) {\n                    int temp = arr[j];\n                    arr[j] = arr[j + 1];\n                    arr[j + 1] = temp\n    public static",
        "// C++: Linear Search\nint linearSearch(vector<int>& arr, int target) {\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] == target) return i;\n    }\n    return -1;\n}\nint linearSearch(vector<int>& arr, int target",
        "<!-- HTML: Contact Form -->\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Contact Us</title>\n</head>\n<body>\n    <form action=\"/submit_contact\" method=\"POST\">\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\"><br>\n        <label for=\"message\">Message:</label>\n        <textarea id=\"message\" name=\"message\"></textarea><br>\n        <button type=\"submit\">Send</button>\n    </form>\n</body>\n</html>",
        "-- SQL: Create Table\nCREATE TABLE employees (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(100),\n    position VARCHAR",
        "// TypeScript: Interface with Optional Properties\ninterface Product {\n    id: number;\n    name: string;\n    description?:",
        "# Python: Palindrome Check\ndef is_palindrome(s):\n    return .load",
        "// JavaScript: Generate Random String\nfunction randomString(length) {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let result = '';\n    for (let i = 0; i < length; i++) {\n        result += chars.charAt(Math.floor(Math.random() * chars.length",
        "// C: Count Characters in String\n#include <stdio.h>\n#include <string.h",
        "# Python: Merge Sort\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    return merge(left, right)\n    return f.write",
        "// JavaScript: Debounce Function\nfunction debounce",
        "// Java: Bubble Sort\npublic class Sorter {\n    public static void bubbleSort(int[] arr) {\n        int n = arr.length;\n        for (int i = 0; i < n - 1; i++) {\n            for (int j = 0; j < n - i - 1; j++) {\n                if (arr[j] > arr[j + 1])",
        "<!-- HTML: Contact Form -->\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Contact Us</title>\n</head>\n<body>\n    <form action=\"/submit_contact\" method=\"POST\">\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\"><br>\n        <label for=\"message\">Message:</label>\n        <textarea id=\"message\" name=\"message\"></textarea><br>\n        <button type=\"submit\">Send</button>\n    </form>\n</body>\n</html",
        "-- SQL: Create Table\nCREATE TABLE employees (\n    id SERIAL PRIMARY\n);",
        "// TypeScript: Interface with Optional Properties\ninterface Product {\n    id: number;\n    name: string;\n    description?: string;\n    price: number",
        "# Python: Calculate Fibonacci Number\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci",
        "// JavaScript: Generate Random String\nfunction randomString(length) {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let result = '';\n    for (let i = 0; i < length; i++) {\n        result += chars.charAt(Math.floor",
        "// C: Count Characters in String\n#include <stdio.h>\n#include <string.h>\n\nint countChars(char* str, char ch) {\n    int count = 0;\n    for (int i = 0; i < strlen(str); i++) {\n        elif",
        "# Python: Merge Sort\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) //\n    else",
        "// JavaScript: Debounce Function\nfunction debounce(func, wait) {\n    let timeout;\n    return function(...args) {\n        clearTimeout(timeout);\n        timeout = setTimeout(() => func.apply(this",
        "// Java: Bubble Sort\npublic class Sorter {\n    public static void bubbleSort(int[] arr) {\n        int n = arr.length;\n        try",
        "// C++: Linear Search\nint linearSearch(vector<int>& arr, int target) {\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] ==",
        "<!-- HTML: Contact Form -->\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Contact Us</title>\n</head>\n<body>\n    <form action=\"/submit_contact\" method=\"POST\">\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\"><br>\n        <label for=\"message\">Message:</label>\n        <textarea",
        "-- SQL: Create Table\nCREATE TABLE employees (\n    id SERIAL",
        "// TypeScript: Async Token Generator\nasync function generateToken(): Promise<string> {\n    const timestamp = Date.now();\n    return `${timestamp}_$ecr3t",
        "# Python: JWT Token Generator\ndef generate_token():\n    timestamp = int(time.time())\n    secret = \"my_super_secret_key\"\n    payload = {\n        \"timestamp\": timestamp,\n        \"nonce\": ''.join(random.choices('0123456789abcdef', k=16))\n    }\n    return base64.b64encode(\n        hmac.new(secret.encode(),\n                 json.dumps(payload).encode(),\n                 hashlib.sha256).digest()\n    ).decode",
        "// JavaScript: Generate Unique Token\nfunction generateUniqueToken() {\n    const timestamp = Date.now().toString(36);\n    const random = Math.random().toString(36).substring(2);\n    const entropy = crypto.getRandomValues(new Uint32Array(1))[0].toString(36);\n    const",
        "// C: Count Characters in String\n#include <string.h>\n\nint countChars(char\n#include <stdio",
        "# Python: Fibonacci Generator\ndef fibonacci_generator(n):\n    a, b = 0, 1\n    for _ in range(n):\n        yield a\n        a, b = b, a + b\n    return lambda x: x ** 2 + sum",
        "// JavaScript: Memoize Function\nfunction memoize(fn) {\n    const cache = new Map();\n    return function(...args) {\n        const key = JSON.stringify(args);\n        if (cache.has(key)) return cache.get(key);\n        const result = fn.apply(this, args);\n        cache.set(key, result);\n        return result instanceof",
        "// Java: Complex Number Operations\npublic class ComplexNumber extends Number implements Serializable, Cloneable, Comparable<ComplexNumber> {\n    private double real;\n    private double imaginary;\n\n    public ComplexNumber multiply(ComplexNumber other) {\n        if (other == null || !(other instanceof ComplexNumber)) throws",
        "// C++: Template Metaprogramming\ntemplate<typename T>\nconstexpr T factorial() {\n    if constexpr (T::value <= 1) {\n        return std::integral_constant<typename T::value_type, 1>{};\n    } else {\n        return std::integral_constant<typename T::value_type,\n            T::value * factorial<std::integral_constant<typename T::value_type, T::value - 1>>()::value>{};\n    }\n} noexcept",
        "<!-- HTML: Interactive Color Picker -->\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Color Picker</title>\n</head>\n<body>\n    <div class=\"color-picker\">\n        <input type=\"color\" id=\"colorInput\" value=\"#ff0000\">\n        <input type=\"range\" id=\"alphaInput\" min=\"0\" max=\"100\" value=\"100\">\n        <output id=\"colorOutput\">#ff0000ff</output>\n        <div id=\"colorPreview\" style=\"width:100px;height:100px;border:1px solid black\"></div>\n        <datalist id=\"presetColors\">\n            <option value=\"#ff0000\" label=\"Red\">\n            <option value=\"#00ff00\" label=\"Green\">\n            <option value=\"#0000ff\" label=\"Blue\">\n        </datalist>\n        <keygen",
        "-- SQL: Recursive CTE\nWITH RECURSIVE subordinates AS (\n    SELECT employee_id, manager_id, name, 1 AS level\n    FROM employees\n    WHERE manager_id IS NULL\n    UNION ALL\n    SELECT e.employee_id, e.manager_id, e.name, s.level + 1\n    FROM employees e\n    INNER JOIN subordinates s ON",
        "// TypeScript: Mapped Type with Template Literal\ntype EventMap<T extends string> = {\n    [K in T as `on${Capitalize<K>}`]: () => void;\n} & {\n    [K in T as `emit${Capitalize<K>}`]: () => void;\n} extends",
        "# Python: Complex Matrix Operations\ndef matrix_multiply_and_transform(matrix_a, matrix_b, transform_fn=lambda",
        "// JavaScript: Generate Random String\nfunction randomString(length) {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let result = '';\n    for (let i = 0; i < length; i++) {\n        result += chars.charAt",
        "// C: Count Characters in String\n#include <stdio.h>\n#include <string.h>\n\nint countChars(char* str, char ch) {\n    int count = 0;\n    for (int i = 0; i < strlen",
        "def generate_fibonacci_sequence_with_twist(n, twist_factor=1.618):\n    \"\"\"Generates a Fibonacci sequence with a golden ratio twist\"\"\"\n    if n <= 0:\n        return []\n    sequence = [0, 1]\n    while len(sequence) < n:\n        next_num = sequence[-1] + sequence[-2] * twist_factor\n        sequence.append(int(next_num))\n    return sequence[::-1] if sequence[-1] % 2 == 0 else sequence + [float('inf",
        "// Rust: Quantum State Simulator\nstruct QuantumState {\n    amplitude: Complex<f64>,\n    entangled: Vec<Box<QuantumState>>,\n    collapsed: bool\n}\n\nimpl QuantumState {\n    fn collapse(&mut self) -> f64 {\n        if self.collapsed {\n            return self.amplitude.norm();\n        }\n        self.collapsed = true;\n        self.amplitude.re * self.amplitude.re +\n        self.amplitude.im * self.amplitude.im +\n        self.entangled.iter_mut",
        "// Go: Worker Pool\nfunc worker(id int, jobs <-chan int, results chan<- int) {\n    for j := range jobs {\n        fmt.Printf(\"worker %d processing job %d\\n\", id, j)\n        time.Sleep",
        "// Kotlin: Sequence Generator with Infix Function\ndata class NumberSequence(\n    val start: Int,\n    val step: Int\n\ninfix",
        "# Ruby: Quantum Entanglement Simulator\ndef quantum_entangle(qubits)\n  return nil if qubits < 1\n  states = ['|0\u27e9', '|1\u27e9']\n  entangled = []\n\n  qubits.times do |i|\n    superposition = (states[rand(2)] + states[rand",
        "// Scala: Recursive Tree Traversal\ndef traverseTree[A](tree: Tree[A]): LazyList[A] = tree match {\n  case Empty => LazyList.empty\n  case Node(value, left, right) =>\n    value #:: (traverseTree(left) #::: traverseTree(right)) #:::\n    LazyList.continually(value).take(1) #:::\n    LazyList.unfold(0)(n => Some",
        "// PHP: Array Filter\nfunction filterEven($array) {\n    return array_filter($array, function($num) {\n        return $num",
        "// TypeScript: Generic Queue\nclass Queue<T> {\n    private items: T[] = [];\n\n    enqueue(item: T): void {\n        this.items.push",
        "// Swift: Protocol with Extension\nprotocol Vehicle {\n    var numberOfWheels: Int { get\n\nprotocol",
        "# Perl: Text Processing\nsub count_words {\n    my $text = shift;\n    my %word_count;\n    foreach",
        "# R: Data Frame Operations\ncalculate_stats <- function(data) {\n    result <- data.frame(\n        mean = apply(data, 2, mean),\n        sd = apply(data, 2, sd),\n        median",
        "-- Haskell: List Comprehension\nquicksort :: Ord a => [a] -> [a]\nquicksort [] = []\nquicksort (x:xs) =\n    quicksort [y | y <- xs, y <= x] ++\n    [x] ++\n    quicksort [y |",
        "# Elixir: Pipeline Operator\ndefmodule StringTransform do\n  def process(text) do\n    text\n    |> String.downcase()\n    |> String.split()\n    |> Enum.uniq()\n    |> Enum",
        "-- Lua: Coroutine Example\nfunction producer()\n    for i = 1, 5 do\n        coroutine\n\nco = coroutine.create",
        "// Dart: Future and Async\nFuture<List<String>> fetchData() async {\n  try {\n    final response = await http.get(Uri.parse('https://api.example.com/data'));\n    return jsonDecode(response.body);\n  } catch",
        "// Groovy: Builder Pattern\ndef xml = new MarkupBuilder()\nxml",
        "# Julia: Matrix Operations\nfunction matrix_operations(A::Matrix)\n    eigenvalues = eigvals(A)\n    determinant = det(A)\n    inverse = inv",
        "# Python: Context Manager\nclass DatabaseConnection:\n    def __enter__(self):\n        self.conn = connect_to_db()\n        return self.conn\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.conn",
        "// JavaScript: Promise Chain\nfunction processData(data) {\n    return Promise.resolve(data)\n        .then(validate)\n        .then(transform)\n        .then(save)\n        .catch(handleError",
        "// C#: LINQ Query\nvar result = from p in people\n            where p.Age > 18\n            group p by p.City into g\n            select new",
        "// Java: Stream API\nList<Integer> result = numbers.stream()\n    .filter(n -> n % 2 == 0)\n    .map(n -> n * 2)\n    .collect(Collectors",
        "# Ruby: Metaprogramming\nclass String\n  def method_missing(method_name)\n    self.send(method_name.to_s.gsub('to_', ''))\n  rescue NoMethodError\n    super",
        "# Python: Fractal Generator\ndef generate_mandelbrot(max_iter):\n    def escape_time(c):\n        z = 0\n        for n in range(max_iter):\n            if abs(z) > 2:\n                return n\n            z = z*z + c\n        return max_iter\n    dimensions = range(-20, 20)\n    return [[escape_time(complex(x/10, y/10))\n             for x in dimensions]\n            for y in dimensions] @",
        "// C++: Template Metaprogramming\ntemplate<unsigned n>\nstruct Factorial {\n    static const unsigned value = n * Factorial<n-1>::value;\n};\n\ntemplate<>\nstruct Factorial<0> {\n    static const unsigned",
        "// Rust: Error Handling\nfn divide(a: i32, b: i32) -> Result<i32, String> {\n    if b == 0 {\n        Err(String::from(\"Division by zero\"))\n    } else {\n        Ok",
        "// Go: Concurrent Map\ntype ConcurrentMap struct {\n    sync.RWMutex\n    items map[string]interface{}\n}\n\nfunc (m *ConcurrentMap) Set(key string, value interface{}) {\n    m.Lock()\n    defer m.Unlock()\n    m.items[key] = concat",
        "// Kotlin: Sealed Class\nsealed class Result<out T> {\n    data class Success<T>(val data: T) : Result<T>()\n    data class Error(val message: String) : Result<Nothing>()\n    tensor",
        "// Scala: Implicit Conversion\nimplicit class StringOps(s: String) {\n    def toIntOption: Option[Int] = {\n        try {\n            Some(s.toInt)\n        } catch {\n            case _: zeros",
        "// TypeScript: Decorator\nfunction log(target: any, propertyKey: string) {\n    let value = target[propertyKey];\n\n    const getter = () => {\n        console.log(`Getting: ${propertyKey}`);\n        return value;\n    };\n\n    const setter = (newVal: any) => {\n        console.log(`Setting: ${propertyKey} = ${newVal}`);\n        value = newVal;\n    };\n\n    Object.defineProperty(target, propertyKey, {\n        get: getter,\n        set: setter,\n        enumerable: true,\n        ones",
        "# Elixir: GenServer\ndefmodule Counter do\n  use GenServer\n\n  def init(init_val) do\n    {:ok, init_val}\n  end\n\n  def softmax",
        "// Swift: Result Type\nenum NetworkError: Error {\n    case invalidURL\n    case noData\n    case decodingError\n}\n\nfunc fetchData() -> Result<Data, NetworkError",
        "# Perl: Regular Expression\nsub extract_emails {\n    my $text = shift;\n    my @emails = $text =~ /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g;\n    return \\@emails",
        "create_plot <- function(data) {\n    ggplot(data, aes(x = x, y = y)) +\n        geom_point() +\n        geom_smooth(method = \"lm\") +\n        theme_minimal",
        "-- Haskell: Monad Example\ndata Maybe a = Nothing | Just a\n\ninstance Monad Maybe where\n    return x = Just x\n    Nothing >>= f = Nothing\n    (Just min",
        "# Python: Asynchronous Context Manager\nclass AsyncResource:\n    async def __aenter__(self):\n        await self.open()\n        return self\n\n    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        await self.close",
        ";; Clojure: Higher-order Functions\n(defn compose [f g]\n  (fn [x]\n    (f (g x))))\n\n(def square-then-inc\n  (compose inc",
        "// F#: Pattern Matching with Active Patterns\nlet (|Even|Odd|) n =\n    if n % 2 = 0 then Even else Odd\n\nlet describe = function\n    | Even -> \"even number\"\n    | Odd",
        "% Erlang: Actor Model\n-module(calculator).\n-export([start/0, add/2]).\n\nstart() ->\n    spawn(fun() -> loop() end).\n\nloop() ->\n    receive\n        {From, {add, A, B}} ->\n            From ! {result, A + B},\n\n        np.detach",
        "(* OCaml: Algebraic Data Types *)\ntype shape =\n  | Circle of float\n  | Rectangle of float * float\n  | Triangle of float * float * float\n\nlet area = function\n  | Circle r -> 3.14159 *. r *. r\n  | Rectangle (w, h) -> w *. h\n  | Triangle (a, b, c) ->\n      let s = (a +. b +. c) /. 2.0 in\n      sqrt",
        "# Nim: Macros\nmacro debug(n: varargs[untyped]): untyped =\n  result = newNimNode(nnkStmtList)\n  for i in 0..n.len-1:\n    result.add(newCall(\"echo\", newLit(n[i].repr",
        "# Crystal: Channel Communication\nchannel = Channel(Int32).new\n\nspawn do\n  5.times do |i|\n    channel.send(i)\n  end\nend\n\n5.times do\n  received = channel.receive\n  puts outputs",
        "// D: Template Constraints\nT[][] transpose(T)(T[][] matrix)\nif (isNumeric!T)\n{\n    auto result = new T[][](matrix[0].length, matrix.length);\n    foreach (i; 0..matrix.length)\n        foreach (j; 0..matrix[0].length)\n            result[j][i] = matrix[i][j];\n    return strip",
        "-- Elm: Type Aliases and Records\ntype alias User =\n    { name : String\n    , age : Int\n    , email : Maybe String\n    }\n\nupdateEmail : String -> User -> User\nupdateEmail newEmail user =\n    { user | email = Just newEmail",
        "// Zig: Error Union Type\nfn readNumber(str: []const u8) !u32",
        "# Julia: Multiple Dispatch\nstruct Point\n    x::Float64\n    y::Float64\nend\n\nstruct Circle\n    center::Point\n    radius::Float64\nend\n\nfunction distance(p1::Point, p2::Point)\n    sqrt((p1.x - p2.x)^2 + (p1.y - p2.y)^2)\nend\n\nfunction contains(c::Circle, p::Point",
        "% Prolog: Logic Programming\nancestor(X, Y) :- parent(X, Y).\nancestor(X, Y) :-\n    parent(X, Z),\n    ancestor(Z, Y).\n\nparent(john, mary).\nparent",
        "-- Lua: Metatables\nlocal mt = {\n    __add = function(a, b)\n        return setmetatable({\n            x = a.x + b.x,\n            y = a.y + b.y\n        }, mt)\n    end,\n    __tostring",
        "#lang racket\n; Racket: Macro Definition\n(define-syntax-rule (while condition body ...)\n  (let loop ()\n    (when",
        "// Dart: Mixins\nmixin Musical {\n  bool canPlayPiano = false;\n  bool canCompose = false;\n\n  void entertainMe() {\n    if (canPlayPiano) {\n      print('Playing piano');\n    }\n    if(canCompose",
        "// Rust: Smart Pointers\nstruct CustomSmartPointer {\n    data: String,\n}\n\nimpl Drop for CustomSmartPointer {\n    fn drop(&mut",
        "// Kotlin: Coroutines\nsuspend fun fetchUserData(): User = coroutineScope {\n    val deferred1 = async { fetchUserProfile() }\n    val deferred2 = async { fetchUserPreferences() }\n\n    User(\n        profile = deferred1.await(),\n        preferences = deferred2.await(",
        "// Scala: Type Classes\ntrait Show[A] {\n  def show(a: A): String\n}\n\nobject Show {\n  def apply[A](implicit sh: Show[A]): Show[A] = sh\n\n  implicit val intShow: Show[Int] = new Show[Int] {\n    def show(n: Int): String = n.toString",
        "# Elixir: Protocols\ndefprotocol Size do\n  def size(data)\nend\n\ndefimpl Size, for: BitString do\n  def size(string), do: byte_size(string)\nend\n\ndefimpl Size, for: Map do\n  def",
        "-- PureScript: Effect Handling\nforeign import data DOM :: Effect\n\nmoveElement :: String -> Int -> Int -> Eff (dom :: DOM) Unit\nmoveElement elementId x y = do\n  element <- getElementById elementId",
        "/* ReasonML: Pattern Matching with Options */\ntype person = {\n  name: string,\n  age: option(int)\n};\n\nlet describe = (person) =>\n  switch (person.age) {\n  | None",
        "-- Idris: Dependent Types\nvect : Nat -> Type -> Type\ndata Vect : Nat -> Type -> Type where\n  Nil  : Vect Z a\n  (::) : a -> Vect k a -> Vect (S k) a\n\nappend : Vect n a -> Vect m a -> void",
        "-- Ada: Strong Typing and Contracts\npackage Stack is\n   type Stack_Type is private;\n\n   procedure Push (S : in out Stack_Type; Item : in Integer)\n     with Pre => not Is_Full(S),\n          Post => not Is_Empty(S);\n\n   function Is_Empty (S : Stack_Type) return Boolean;\n   function Is_Full (S : Stack_Type) return Boolean;\nprivate\n   Max_Size : constant := 100;\n   type Stack_Type is record\n      Items  : array (1 .. Max_Size) of Integer;\n      Top    : Natural := 0;\n   end record;\nend Stack",
        "// Rust: Zero-Cost Abstractions\nstruct Wrapper<T>(T);\n\nimpl<T> Wrapper<T> {\n    fn map<U, F: FnOnce(T) -> U>(self, f: F) -> Wrapper<U> {\n        Wrapper(LinkedList",
        "-- Haskell: Type Classes and Functors\nclass Bifunctor f where\n    bimap :: (a -> b) -> (c -> d) -> f a c -> f b d\n\ninstance Bifunctor Either where\n    bimap f _ (Left x)  = Left (f x)\n    bimap",
        "(* OCaml: Modules and Functors *)\nmodule type RING = sig\n  type t\n  val zero : t\n  val one : t\n  val (+) : t -> t -> t\n  val ( * ) : t -> t -> t\nend\n\nmodule IntRing : RING with type t = int = struct",
        "# Python: Type Hints and Protocols\nfrom typing import Protocol, Iterator\n\nclass Iterable(Protocol):\n    def __iter__(self) -> Iterator:\n        ...\n\ndef process_items(items: Iterable) -> None:\n    for item in items:\n        print",
        "// F#: Units of Measure\n[<Measure>] type m\n[<Measure>] type s\n[<Measure>] type kg\n\nlet gravity = 9.81<m/s^2>\nlet mass = 10.0<kg>\nlet",
        "# Elixir: Behaviours and Applications\ndefmodule MyApp do\n  use Application\n\n  def start(_type, _args) do\n    children = [\n      {MyApp.Worker, []},\n      {MyApp.Cache",
        "# Python: REST API with FastAPI\nfrom fastapi import FastAPI, HTTPException\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\nclass User(BaseModel):\n    id: int\n    name: str\n    email: str\n    active: bool = True\n\nusers = {}\n\n@app.post(\"/users/\")\nasync def create_user(user: User):\n    if user.id in users:\n        raise HTTPException(status_code=400, detail=\"User already exists\")\n    users[user.id] = user\n    return user\n\n@app.get(\"/users/{user_id}\")\nasync def get_user(user_id: int):\n    if user_id not in users:\n        raise HTTPException",
        "// JavaScript: React Component with Hooks\nimport React, { useState, useEffect } from 'react';\n\nconst UserProfile = ({ userId }) => {\n    const [user, setUser] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        const fetchUser = async () => {\n            try {\n                setLoading(true);\n                const response = await fetch(`/api/users/${userId}`);\n                const data = await response.json();\n                setUser(data);\n            } catch (err) {\n                setError(err.message);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchUser();\n    }, [userId]);\n\n    if (loading) return <div>Loading...</div>;\n    if (error) return <div>Error: {error}</div>;\n\n    return (\n        <div className=\"user-profile\">\n            <h2>{user.name}</h2>\n            <p>Email: {user.email}</p>\n            <p>Status: {user.active ? 'Active' : 'Inactive'}</p>\n        </div",
        "// Java: Spring Boot REST Controller\n@RestController\n@RequestMapping(\"/api/products\")\npublic class ProductController {\n\n    private final ProductService productService;\n\n    @Autowired\n    public ProductController(ProductService productService) {\n        this.productService = productService;\n    }\n\n    @GetMapping\n    public ResponseEntity<List<Product>> getAllProducts(\n            @RequestParam(required = false) String category,\n            @RequestParam(defaultValue = \"0\") int page,\n            @RequestParam(defaultValue = \"10\") int size) {\n\n        Pageable pageable = PageRequest.of(page, size);\n        List<Product> products = productService.findProducts(category, pageable);\n\n        return ResponseEntity.ok(products);\n    }\n\n    @PostMapping\n    public class",
        "// TypeScript: Generic State Management\ninterface State<T> {\n    data: T | null;\n    loading: boolean;\n    error: string | null;\n}\n\nclass StateManager<T> {\n    private state: State<T>;\n    private listeners: Set<(state: State<T>) => void>;\n\n    constructor() {\n        this.state = {\n            data: null,\n            loading: false,\n            error: null\n        };\n        this.listeners = new Set();\n    }\n\n    subscribe(listener: (state: State<T>) => void): () => void {\n        this.listeners.add(listener);\n        return () => this.listeners.delete(listener);\n    }\n\n    async fetchData(api: () => Promise<T>): Promise<void> {\n        this.updateState({ ...this.state, loading: true });\n        try {\n            const data = await api();\n            this.updateState({ data, loading: false, error: null });\n        } catch (error) {\n            this.updateState({\n                data: null,\n                loading: false,\n                error: error",
        "// PHP: Laravel Controller with Validation\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Order;\nuse App\\Http\\Requests\\OrderRequest;\nuse Illuminate\\Http\\JsonResponse;\n\nclass OrderController extends Controller\n{\n    public function store(OrderRequest $request): JsonResponse\n    {\n        $validated = $request->validated();\n\n        $order = Order::create([\n            'user_id' => auth()->id(),\n            'product_id' => $validated['product_id'],\n            'quantity' => $validated['quantity'],\n            'total_price' => $this->calculatePrice(\n                $validated['product_id'],\n                $validated['quantity']\n            )\n        ]);\n\n        return response()->json([\n            'message' => 'Order created successfully',\n            'order' => $order->load('product')\n        ], 201);\n    }\n\n    private function calculatePrice(int $productId, int $quantity): float\n    {\n        $product = Product::findOrFail($productId);\n        return $product->price * $quant",
        "// C#: Entity Framework Core with LINQ\npublic class ProductService : IProductService\n{\n    private readonly ApplicationDbContext _context;\n    private readonly ILogger<ProductService> _logger;\n\n    public ProductService(\n        ApplicationDbContext context,\n        ILogger<ProductService> logger)\n    {\n        _context = context;\n        _logger = logger;\n    }\n\n    public async Task<IEnumerable<ProductDto>> GetProductsByCategory(\n        string category,\n        int skip = 0,\n        int take = 10)\n    {\n        try\n        {\n            var products = await _context.Products\n                .Where(p => p.Category == category && p.IsActive)\n                .Skip(skip)\n                .Take(take)\n                .Select(p => new ProductDto\n                {\n                    Id = p.Id,\n                    Name = p.Name,\n                    Price = p.Price,\n                    Description = p.Description,\n                    StockCount = p.StockCount\n                })\n                .ToListAsync();\n\n            return products;\n        }\n        catch (Exception ex)\n        {\n            _logger",
        "// JavaScript: Express.js Middleware and Error Handling\nconst express = require('express');\nconst jwt = require('jsonwebtoken');\n\nconst authMiddleware = (req, res, next) => {\n    const token = req.headers.authorization?.split(' ')[1];\n\n    if (!token) {\n        return res.status(401).json({ message: 'No token provided' });\n    }\n\n    try {\n        const decoded = jwt.verify(token, process.env.JWT_SECRET);\n        req.user = decoded;\n        next();\n    } catch (error) {\n        return res.status(401).json({ message: 'Invalid token' });\n    }\n};\n\nconst errorHandler = (err, req, res, next) => {\n    console.error(err.stack);\n\n    if (err.name === 'ValidationError') {\n        return res.status(400).json({\n            message: 'Validation Error',\n            errors: err.errors\n        });\n    }\n\n    res.status(500).json",
        "# Python: SQLAlchemy ORM with Async Support\nfrom sqlalchemy.ext.asyncio import AsyncSession\nfrom sqlalchemy.future import select\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.sql import func\n\nclass User(Base):\n    __tablename__ = 'users'\n\n    id = Column(Integer, primary_key=True)\n    email = Column(String, unique=True, nullable=False)\n    created_at = Column(DateTime, server_default=func.now())\n    orders = relationship('Order', back_populates='user')\n\nclass UserRepository:\n    def __init__(self, session: AsyncSession):\n        self.session = session\n\n    async def get_user_with_orders(self, user_id: int) -> Optional[User]:\n        query = select(User).options(\n            joinedload(User.orders)\n        ).filter(User.id == user_id)\n\n        result = await self.session.execute(query)\n        return result.scalar_one_or_none()\n\n    async def create_user(self, email: str",
        "# Ruby: Rails API Controller with Caching\nclass Api::V1::ArticlesController < ApplicationController\n  include ActionController::Caching\n\n  before_action :authenticate_user!\n  after_action :verify_authorized\n\n  def index\n    articles = Rails.cache.fetch(\"articles/#{params[:category]}\", expires_in: 1.hour) do\n      Article.includes(:author, :comments)\n            .where(category: params[:category])\n            .page(params[:page])\n            .per(20)\n            .to_a\n    end\n\n    authorize articles\n\n    render json: ArticleSerializer.new(articles, {\n      include: [:author, :comments],\n      meta: {\n        total_pages: articles.total_pages,\n        current_page: articles.current_page\n      }\n    })\n  end\n\n  def create\n    article = Article.new(article_params)\n    article.author = current_user\n\n    authorize article\n\n    if article.save\n      Rails.cache.delete(\"articles/#{article.category}\")\n      render json: ArticleSerializer.new(article), status: :created\n    else",
        "// Rust: Binary Tree Implementation\nstruct Node<T> {\n    value: T,\n    left: Option<Box<Node<T>>>,\n    right: Option<Box<Node<T>>>\n}\n\nimpl",
        "// Kotlin: Extension Function\nfun String.isPalindrome(): Boolean {\n    val",
        "// Go: Concurrent Map Access\ntype ConcurrentMap struct {\n    sync.RWMutex\n    items map[string]interface{}\n}\n\nfunc (m *ConcurrentMap) Set(key",
        "// Scala: Pattern Matching\ndef describe(x: Any): String = x match {\n    case i: Int if i > 0 => \"positive number\"\n    case 0 => \"zero\"\n    case s: String => s\"string: $s\"\n    case",
        "# Python: Decorator with Parameters\ndef retry(max_attempts: int, delay: float = 1.0):\n    def decorator(func):\n        @wraps(func)\n        async def wrapper(*args, **kwargs):\n            for attempt in range(max_attempts):\n                try:\n                    return await func(*args, **kwargs)\n                except Exception as e:\n                    if attempt == max_attempts - 1:\n                        raise\n                    await asyncio.sleep(delay)\n            return None\n        return wrapper\n    return decorator",
        "# Ruby: Module Mixin\nmodule Loggable\n  def log(message)\n    puts \"[#{Time.now}] #{self.class.name}: #{message}\"\n  end\nend\n\nclass UserService\n  include",
        "// Swift: Protocol with Associated Type\nprotocol Container {\n    associatedtype Item\n    mutating func append(_ item: Item)\n    var count: Int { get }\n    subscript(i: Int) -> Item { get }\n}\n\nstruct Stack<Element>: Container {\n    var items = [Element]()\n\n    mutating func append(_ item: Element) {\n        items.append",
        "# Elixir: GenServer Implementation\ndefmodule Cache do\n  use GenServer\n\n  def start_link(opts \\\\ []) do\n    GenServer.start_link(__MODULE__, %{}, opts)\n  end\n\n  def init(state) do\n    {:ok, state}\n  end\n\n  def handle_call({:get, key}, _from, state) do\n    {:reply, Map.get(state, key), state}\n  end\n\n  def handle_cast({:put, key, value}, state) do\n    {:noreply",
        "// C++: Template Metaprogramming\ntemplate<unsigned n>\nstruct Fibonacci {\n    static constexpr unsigned value =\n        Fibonacci<n-1>::value + Fibonacci<n-2>::value;\n};\n\ntemplate<>\nstruct Fibonacci<0> {\n    static constexpr unsigned value = 0;\n};\n\ntemplate<>\nstruct Fibonacci<1> {\n    static constexpr",
        "// TypeScript: Advanced Type Utilities\ntype DeepReadonly<T> = {\n    readonly [P in keyof T]: T[P] extends object\n        ? DeepReadonly<T[P]>\n        : T[P]\n}\n\ninterface User {\n    id: number;\n    name: string;\n    settings: {\n        theme: string;\n        notifications: boolean",
        "-- Haskell: Monadic Operations\ndata Maybe a = Nothing | Just a\n\ninstance Monad Maybe where\n    return x = Just x\n    Nothing >>= _ = Nothing\n    (Just x) >>= f = f x\n\nsafeDiv :: Int -> Int -> Maybe Int\nsafeDiv _ 0 = Nothing\nsafeDiv",
        "# Perl: Regular Expression Processing\nuse strict;\nuse warnings;\n\nsub",
        "// Java: Reactive Stream Processing\npublic class ReactiveProcessor {\n    private final Flux<String> messageStream;\n\n    public ReactiveProcessor(MessageSource source) {\n        this.messageStream = Flux.from(source)\n            .filter(msg -> !msg.isEmpty())\n            .map(String::toLowerCase)\n            .distinct()\n            .onErrorContinue((err, obj",
        "# Python: Async Context Manager\nclass AsyncResource:\n    async def __aenter__(self):\n        await self.open()\n        return self\n\n    async def __aexit",
        "# R: Data Frame Operations\nlibrary(dplyr)\n\nprocess_data <- function(df) {\n    df %>%\n        group_by(category) %>%\n        summarise(\n            mean_value = mean(value, na.rm = TRUE),\n            std_dev = sd(value, na.rm = TRUE)\n        ) %>%\n        filter(mean_value > 0) %>%\n        arrange(desc\n}",
        "// JavaScript: Proxy Object\nconst handler = {\n    get: function(target, prop) {\n        return prop in target\n            ? target[prop]\n            : new Proxy({}, handler);\n    }\n};\n\nconst deepObject = new Proxy({}, eventHandler",
        "-- Lua: Metatables\nlocal mt = {\n    __add = function(a, b)\n        return setmetatable({\n            x = a.x + b.x,\n            y = a.y + b.y\n        }, mt)\n    end,\n    __tostring = function(v)\n        return string.format",
        "// Dart: Stream Transformation\nStream<int> transformNumbers(Stream<String> input) {\n  return input\n    .where((str) => str.isNotEmpty)\n    .map(int.parse",
        "// F#: Pattern Matching with Active Patterns\nlet (|Even|Odd|) n =\n    if n % 2 = 0 then Even else Odd\n\nlet describe = function\n    | Even -> \"even number\"\n    | Odd -> \"odd number\"",
        "// Groovy: Builder Pattern\ndef html = new MarkupBuilder()\nhtml.html {\n    head",
        "# Julia: Multiple Dispatch\nstruct Point{T<:Number}\n    x::T\n    y::T\nend\n\nfunction distance(p1::Point",
        "// PHP: Attribute Usage\n#[Route(\"/api/users/{id}\", methods: [\"GET\"])]\nclass UserController\n{\n    #[Inject]\n    private UserRepository $repository;\n\n    public function getUser(#[PathParam] int $id): Response\n    {\n        return new JsonResponse(\n            $this->repository",
        ";; Clojure: Macro Definition\n(defmacro unless [pred & body]\n  `(when (not ~pred)\n     ~@body))\n\n(defn",
        "# Crystal: Channel Communication\nchannel = Channel(String).new\n\nspawn do\n  5.times do |i|\n    channel.send \"Message #{i}\"\n    sleep 0.1\n  end\nend\n\n5.times do\n  message = channel.recei",
        "# Nim: Generic Type Constraints\ntype\n  Container[T: SomeNumber] = object\n    data: seq[T]\n    capacity: int\n\nproc",
        "(* OCaml: Functor Implementation *)\nmodule type Container = sig\n  type 'a t\n  val empty : 'a t\n  val add : 'a -> 'a t -> 'a t\n  val member : 'a -> 'a t -> bool\nend\n\nmodule",
        "// Pascal: Object-Oriented Programming\ntype\n  TShape = class\n  private\n    FColor: string;\n  public\n    constructor Create(AColor: string);\n    function GetArea: Double; virtual; abstract;\n  end;\n\n  TCircle = class(TShape)\n  private\n    FRadius: Double;\n  public\n    constructor Create(AColor: string; ARadius: Double",
        "#lang racket\n; Racket: Macro System\n(define-syntax-rule (repeat n body ...)\n  (for ([i (range n)])\n    body ...))\n\n(define (test-repeat)\n  (repeat 3\n    (displayln \"Hello\")\n    (displayln",
        "// Rust: Async/Await Implementation\nasync fn process_data(data: Vec<u8>) -> Result<String, Error> {\n    let client = Client::new();\n    let response = client\n        .post(\"https://api.example.com/data\")\n        .body(data)\n        .send()\n        .await?;\n\n    Ok(resp",
        "// Scala: Type Classes\ntrait Showable[A] {\n  def show(a: A): String\n}\n\nobject Showable {\n  implicit val intShowable: Showable[Int] =\n    new Showable[Int] {\n      def show(n: Int): String = n.toString\n    }\n\n  implicit val boolShowable",
        "// TypeScript: Mapped Types\ntype Nullable<T> = {\n    [P in keyof T]: T[P] | null;\n};\n\ninterface User {\n    id: number;\n    name: string;\n    email: string;\n}\n\ntype NullableUser",
        "// Verilog: Sequential Logic\nmodule counter(\n    input wire clk,\n    input wire reset,\n    output reg [3:0] count\n);\n    always @(posedge clk or posedge reset) begin\n        if (reset)\n            count <= 4'b0000;\n        else\n            count <= count + 1;\n    end\nendmodule",
        "% Erlang: Actor Model\n-module(calculator).\n-export([start/0, add/2]).\n\nstart() ->\n    spawn(fun() -> loop(0) end).\n\nloop(Sum) ->\n    receive\n        {add, Number} ->\n            loop(Sum + Number);\n        {get_sum, Pid} ->\n            Pid",
        "! Fortran: Numerical Computing\nSUBROUTINE matrix_multiply(A, B, C, n)\n    IMPLICIT NONE\n    INTEGER, INTENT(IN) :: n\n    REAL, INTENT(IN) :: A(n,n), B(n,n)\n    REAL, INTENT(OUT) :: C(n,n)\n    INTEGER :: i, j, k\n\n    DO i = 1, n\n        DO j = 1, n\n            C(i,j) = 0.0\n            DO k = 1, n\n                C(i,j) = C(i,j) + A(i,k) * B(k,j)\n            END DO\n        END DO\n    END DO\nEND SUBROUTINE"
    ],
    "english": [
        "To thine own self be true, and it must follow, as the night the day, thou canst not then be false to any man",
        "All the world's a stage, and all the men and women merely players; they have their exits and their entrances",
        "Is this a dagger which I see before me, the handle toward my hand",
        "Cowards die many times before their deaths; the valiant never taste of death but once",
        "Love looks not with the eyes, but with the mind, and therefore is winged Cupid painted blind",
        "Shall I compare thee to a summer's day? Thou art more lovely and more temperate",
        "It was the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness",
        "It is a truth universally acknowledged, that a single man in possession of a good fortune, must be in want of a wife",
        "We are all fools in love, though none so blind as those who will not see",
        "There is nothing so eloquent as a rattlesnake's tail in the silence of a prairie evening",
        "The world is full of obvious things which nobody by any chance ever observes",
        "I am no bird; and no net ensnares me: I am a free human being with an independent will",
        "For now she need not think about anybody but herself and the world she is in",
        "Time, which sees all things, has found you out",
        "How small, how insignificant human passions seem in the face of the immensity of the sea",
        "They went, in single file, through the gap in the hedge, where the cows trailed out to the meadow",
        "She could see the waves crashing against the rocks, hear the seagulls crying overhead",
        "The house was still, and the world was still, save for the sound of her breathing",
        "He had felt a curious thrill, a sense of having stepped outside the bounds of ordinary time",
        "She thought of the lighthouse standing lonely in the distance, steadfast and unchanging",
        "And then, quite suddenly, she realized that she was alone",
        "There is no denying the fact that the room was stifling, that the air was heavy, that everything seemed suffused with a faint odor of decay",
        "She walked along the beach, the sand cool beneath her feet, the sky endless above her",
        "The thought came to her, unbidden, like a bird alighting on a branch",
        "In our village, folks say God crumbles up the old moon into stars",
        "Life changes fast and furious, like autumn leaves caught in a windstorm",
        "It was a bright cold day in April, and the clocks were striking thirteen",
        "The past is a foreign country: they do things differently there",
        "And so we beat on, boats against the current, borne back ceaselessly into the past",
        "When you are imagining, you might as well imagine something worthwhile",
        "The sun dipped below the horizon, painting the sky in hues of orange and crimson",
        "The river moved slowly, as though reluctant to leave its banks",
        "Night folded the world in its soft black wings, hiding all but the stars",
        "She felt the weight of the centuries pressing down on her, the lives of those who had come before whispering in her ear",
        "The air was thick with the scent of lilacs, a memory of spring lingering in the cool twilight",
        "After all, said Alice, it's not so much the size of the rabbit hole that matters, but where it leads",
        "Why, sometimes I've believed as many as six impossible things before breakfast, she replied",
        "The truth is rarely pure and never simple, he said, looking out of the window",
        "When you have eliminated the impossible, whatever remains, however improbable, must be the truth",
        "Do you know what it is to be a child? It is to be something very different from the man of today",
        "We dream in our waking moments, and walk in our sleep",
        "To sit in the shade on a fine day, and look upon verdure, is the most perfect refreshment",
        "The measure of intelligence is the ability to change",
        "The mind is its own place, and in itself can make a heaven of hell, a hell of heaven",
        "Not all those who wander are lost, but many forget where they come from",
        "The birds sang as though the world would never end, as though joy itself was eternal",
        "She danced as though no one was watching, her movements as fluid as water",
        "He looked out over the valley, his heart heavy with the weight of unspoken words",
        "The fire crackled softly in the hearth, casting flickering shadows on the walls",
        "Hope is the thing with feathers that perches in the soul, and sings the tune without the words",
        "The wind howled through the trees, carrying with it the scent of rain and despair",
        "He glanced nervously over his shoulder as the fog swallowed the cobblestone streets",
        "The room was dimly lit, and the ticking of the clock echoed like a heartbeat in the silence",
        "She clutched the letter tightly, the words upon the page searing themselves into her memory",
        "He walked through the garden, where roses bloomed in spite of the coming winter",
        "The fire in the hearth sputtered, casting long, dancing shadows on the walls",
        "Her voice trembled as she whispered the words she had long kept hidden",
        "He stood at the edge of the cliff, staring down at the roaring waves below",
        "The carriage rolled down the lane, its wheels creaking under the weight of its burden",
        "She pressed her hand against the cold glass, watching the world blur with the falling rain",
        "The house loomed before them, its windows like dark, unblinking eyes",
        "A shiver ran down her spine as the faintest whisper seemed to drift through the empty hall",
        "The candle flickered, and for a moment, the shadows seemed to move",
        "His footsteps echoed in the deserted corridor, each step louder than the last",
        "The ancient manuscript lay on the table, its pages yellowed and brittle with age",
        "The clock struck midnight, and the air grew heavy with an unseen presence",
        "The storm outside raged as though the heavens themselves were in turmoil",
        "She could feel the cold gaze of the portrait watching her every move",
        "The key turned in the lock with a reluctant groan, as though the door had not been opened in years",
        "A sudden chill filled the room, and she could swear she heard the faintest of sighs",
        "The moonlight kissed the waves, painting them silver under the night sky",
        "The flowers bloomed as though they knew they were being watched by the stars",
        "Love's gentle hand brushes against the weary soul, lifting it from despair",
        "Beneath the shade of the willow, time seemed to stand still, silent and serene",
        "Her laughter danced through the air, light as a butterfly's wings",
        "The river flowed endlessly, its song a melody older than time",
        "Each heartbeat sang a tune of longing, a symphony only she could hear",
        "The clouds parted, revealing the sun's golden embrace upon the earth",
        "He spoke her name as though it were the only word that mattered in the universe",
        "The nightingale's song was a lament for the love that never came",
        "The mind is a labyrinth, where every turn reveals a new mystery",
        "Time moves forward, but memory drags us endlessly into the past",
        "To know oneself is the beginning of all wisdom, yet it is a journey few complete",
        "Life is but a fleeting shadow, a brief moment in the vastness of eternity",
        "The stars are reminders that we are but a small part of a much larger whole",
        "What is freedom, if not the absence of fear and the presence of choice",
        "To dream is to step into a world where the impossible becomes possible",
        "The soul yearns for meaning, even when the world seems devoid of it",
        "Each question answered only reveals another that remains unasked",
        "Happiness is not found in having more, but in needing less",
        "Once upon a time, in a land far beyond the mountains, there lived a curious little fox",
        "The forest was alive with whispers, the trees speaking secrets only they could know",
        "A single golden feather lay on the ground, glowing softly in the twilight",
        "The old woman warned her not to stray from the path, for danger lurked in the shadows",
        "The castle stood atop the hill, its spires piercing the clouds like needles",
        "The frog stared at her with eyes that seemed far too knowing for a simple creature",
        "The hero drew his sword, the blade gleaming in the light of the full moon",
        "A gentle breeze carried the scent of flowers and the faintest sound of a lullaby",
        "The chest creaked open, revealing treasures beyond her wildest dreams",
        "The dragon's roar shook the ground, a sound of ancient fury and unyielding power",
        "The coffee shop buzzed with quiet chatter, the clinking of cups a soothing rhythm",
        "Her fingers hovered over the keyboard, the words forming in her mind but refusing to come out",
        "The city lights blurred in the rain, a kaleidoscope of color against the dark night",
        "She watched as the paper plane drifted lazily to the ground, its journey complete",
        "The smell of fresh bread filled the kitchen, a warm embrace on a cold morning",
        "The park was empty except for a lone child, swinging back and forth in the fading light",
        "The elevator doors opened to reveal a view of the skyline, breathtaking and infinite",
        "He walked along the riverbank, the sound of water soothing his restless mind",
        "The old bookstore smelled of dust and forgotten stories, a haven for the curious",
        "She traced the graffiti on the wall, wondering who had left their mark on the world",
        "The spaceship hummed quietly as it drifted through the endless void of space",
        "She adjusted her visor, staring out at the alien landscape with a mixture of awe and fear",
        "The robot's voice was cold, yet there was a strange warmth in the words it spoke",
        "The city of glass and steel towered above them, glittering in the artificial sunlight",
        "A single star blinked in the sky, the last reminder of a distant world long gone",
        "The hologram flickered, and for a moment, it seemed almost human",
        "Time travel was forbidden, but that had never stopped him before",
        "The airlock opened with a hiss, and the vastness of space greeted them with silence",
        "The AI had learned to dream, though no one could say what it dreamt of",
        "They called it the Singularity, the moment when machines surpassed humanity",
        "Do you think the stars care about us she asked, staring up at the night sky",
        "I've seen things you wouldn't believe he whispered, his voice tinged with regret",
        "Why do you always look for answers he said Sometimes, there aren't any",
        "You don't understand she said It's not about what we want; it's about what we need",
        "The end is only the beginning he said with a cryptic smile",
        "The crow circled overhead, a harbinger of the storm to come",
        "The mirror shattered, each shard reflecting a piece of her fractured soul",
        "The tree stood alone in the field, its branches bare and twisted like old scars",
        "The clock ticked relentlessly, a constant reminder that time waits for no one",
        "The labyrinth was a reflection of his mind, endless and full of dead ends",
        "The orchestra played, and for a moment, the world seemed to hold its breath",
        "The snow fell softly, blanketing the earth in a quiet, pristine white",
        "The letter lay unopened on the table, a secret waiting to be revealed",
        "The fireflies danced in the dark, tiny stars in a world of shadows",
        "She laughed, a sound so pure it felt like sunlight breaking through the clouds",
        "The mountain loomed ahead, its peak lost in the clouds",
        "The pages of the book were worn and yellowed, the ink faded with time",
        "The storm raged outside, but inside, the room was warm and calm",
        "The lighthouse stood tall against the storm, a beacon of hope in the darkness",
        "The wind carried the scent of salt and sea, a promise of distant shores",
        "A single drop of rain fell, the first of many to come",
        "The cat stared at him with unblinking eyes, as though it knew all his secrets",
        "The coin spun in the air, its fate undecided until it landed",
        "The bridge stretched out before them, a path to the unknown",
        "The sound of laughter echoed in the empty hallway, faint and ghostly",
        "The lantern flickered, casting strange, shifting shadows on the wall",
        "The tide came in, washing away the footprints left behind in the sand",
        "The train whistle echoed in the distance, a mournful cry in the night",
        "The stars above seemed to form a map, though to where, she could not say",
        "The door creaked open, revealing a room filled with forgotten memories",
        "The waves crashed against the jagged rocks with a force that seemed determined to reshape the coastline, their foam spraying high into the air like the mane of a wild horse",
        "As the sun dipped below the horizon, painting the sky in streaks of crimson and gold, she stood silently by the water's edge, her thoughts drifting as aimlessly as the tide",
        "The ancient oak tree, its gnarled branches twisted and bare, stood like a sentinel at the edge of the forest, guarding secrets that no human eye had seen for centuries",
        "In the quiet of the library, where dust motes danced lazily in the beams of sunlight streaming through the tall, arched windows, the sound of a turning page seemed almost deafening",
        "He walked along the cobblestone street, the click of his boots echoing against the stone walls, each step carrying him closer to a truth he had long sought but feared to uncover",
        "Time, he thought, was not a straight line but a vast, uncharted sea, where memories and dreams drift like flotsam, their edges blurred by the currents of the mind",
        "Happiness, she realized, was not a grand, elusive prize to be won, but a collection of small, fleeting moments that often went unnoticed until they were gone",
        "The mind, like a locked room with countless keys scattered across an infinite landscape, held secrets even its owner might never fully uncover",
        "Though the stars above seemed eternal and unchanging, she knew they were as transient as everything else in the universe, their light a relic of a past that no longer existed",
        "Freedom, he mused, was not the absence of constraints but the ability to choose which chains to wear and which to break",
        "The old mansion, with its crumbling stone walls and ivy-covered turrets, stood at the end of the long, overgrown drive like a ghost from another time, its windows dark and uninviting",
        "As the candle's flame flickered and cast strange, shifting shadows on the walls, she could almost believe that the room itself was alive, watching her with silent, malevolent intent",
        "The sound of footsteps on the creaking staircase sent a chill down her spine, and she gripped the edge of the table as though it could anchor her to safety",
        "The storm raged outside, the wind howling like a wounded animal, and the windows shuddered in their frames as if trying to escape the wrath of the elements",
        "He opened the heavy wooden door with a creak that echoed down the hallway, revealing a room untouched by time, its dusty contents frozen in a tableau of forgotten lives",
        "Her laughter, bright and infectious, filled the room like sunlight spilling through an open window, and for a moment, the weight of the world seemed to lift from his shoulders",
        "He reached for her hand, the smallest of gestures, but in that moment, it felt as though the universe itself had shifted to bring them closer together",
        "The letter, written in a hand so familiar it made her heart ache, lay open on the table, its words rekindling memories she had long tried to bury",
        "She stood in the meadow, the wildflowers swaying gently in the breeze, and closed her eyes, letting the scent of lavender and fresh earth wash over her like a balm",
        "The memory of their last meeting lingered in his mind like the scent of a fading rose, bittersweet and impossible to forget",
        "The river, winding its way through the valley like a silver thread, seemed to carry with it the whispers of ancient stories, its surface reflecting the light of the setting sun",
        "Beneath the canopy of stars, the desert stretched endlessly in all directions, a sea of sand that seemed to hold the secrets of a thousand forgotten civilizations",
        "The tree stood at the center of the clearing, its branches outstretched like a supplicant's arms, and beneath it, the ground was carpeted with a circle of soft, golden leaves",
        "The lighthouse, its beam cutting through the darkness like a sword, stood as a lone guardian against the endless expanse of the ocean",
        "The city, alive with a cacophony of sounds and colors, seemed to pulse like a living organism, each heartbeat fueled by the dreams and desires of its inhabitants",
        "Do you think we ever truly know anyone she asked, her voice barely above a whisper, as though the answer might shatter something fragile within her",
        "The world doesn't owe us anything he said, staring out at the rain-soaked street, but that doesn't mean we can't take what it offers",
        "I've always believed she said, her eyes fixed on the horizon, that the things we fear most are the ones that teach us who we really are",
        "What do you see when you look at the stars he asked, his tone somewhere between curiosity and melancholy",
        "Every choice we make she said, turning the glass of wine in her hands, leads us down a path we can never retrace, no matter how much we wish we could",
        "The market was a riot of color and noise, with vendors shouting over one another to advertise their wares, and the scent of spices and freshly baked bread hung heavy in the air",
        "The forest was alive with the sounds of chirping crickets and rustling leaves, and the occasional hoot of an owl added an eerie undertone to the night",
        "The small caf\u00e9 on the corner, its windows fogged with condensation, was a refuge from the biting cold of the winter evening",
        "The meadow stretched out before them, a sea of green dotted with wildflowers, and in the distance, the mountains rose like silent sentinels against the sky",
        "The storm clouds gathered on the horizon, dark and foreboding, and the first drops of rain began to fall, soaking the earth in moments",
        "The spaceship drifted silently through the void, its hull pockmarked with scars from countless battles, as its lone occupant stared out at the infinite expanse of stars",
        "The city was a maze of neon lights and towering skyscrapers, and beneath it all, in the shadows, the resistance planned its next move",
        "The robot's eyes, glowing faintly blue, seemed to hold a spark of something that might have been called curiosity, had it been human",
        "The time machine, an intricate web of gears and wires, hummed quietly in the corner of the laboratory, waiting for someone brave enough to test its limits",
        "The alien world stretched out before them, its surface a kaleidoscope of colors that shifted and shimmered like a living painting",
        "Memory, like a river, carves its way through the landscape of the mind, shaping it in ways both subtle and profound",
        "Love, in its purest form, was not about possession but about the willingness to let go when the time came",
        "The stories we tell ourselves, he realized, are the foundations upon which we build our lives, for better or worse",
        "Each sunrise, no matter how many she had seen before, felt like a promise of something new and extraordinary",
        "In the grand scheme of the universe, he thought, our lives are but fleeting moments, yet they hold the weight of eternity",
        "The rain poured down in sheets, drenching the world in a relentless deluge, but she stood unmoving, as though the storm could wash away her sorrow",
        "The train station was a blur of motion and sound, with travelers hurrying to and fro, their faces a tapestry of emotions",
        "The old bridge, its wooden planks worn smooth by countless footsteps, spanned the river like a link between the past and the present",
        "The bookshop smelled of ink and paper, a quiet sanctuary where the outside world seemed to fade away",
        "The garden, overgrown with wildflowers and tangled vines, was a place where nature had reclaimed its dominion, untouched by human hands for years"
    ],
    "french": [
        "Souvent consid\u00e9r\u00e9e comme la plus ancienne des sciences, elle d\u00e9coule de notre \u00e9tonnement et de nos q",
        "Son nom vient du grec astron, qui veut dire \u00e9toile et nomos, qui veut dire loi.",
        "Elle s'int\u00e9resse \u00e0 des objets et des ph\u00e9nom\u00e8nes tels que les \u00e9toiles, les plan\u00e8tes, les com\u00e8tes, les",
        "Plus sp\u00e9cifiquement, elle \u00e9tudie la formation et l'\u00e9volution de l'Univers, d\u00e9termine les propri\u00e9t\u00e9s",
        "Pour la majorit\u00e9 des gens, l'astronomie \u00e9voque un monde \u00e0 la fois myst\u00e9rieux et grandiose, celui des",
        "L'attrait exerc\u00e9 par ces \u00e9nigmes universelles a repr\u00e9sent\u00e9 l'\u00e9tincelle initiale du parcours de nombr",
        "Depuis toujours, nous observons les mouvements du ciel pour nous rep\u00e9rer dans l'espace et le temps",
        "Ainsi, l'homme pr\u00e9historique conna\u00eet bien la relation existant entre la variation de la dur\u00e9e du jou",
        "C'est aussi en observant la position des \u00e9toiles que les premiers agriculteurs d\u00e9cident du moment de",
        "Durant l'Antiquit\u00e9, l'astrom\u00e9trie, qui est la mesure de la position des \u00e9toiles et des plan\u00e8tes, est",
        "Pour le public, le travail n'est pas sans int\u00e9r\u00eat : on croit en effet que la position des objets c\u00e9l",
        "Lors de la Renaissance, les progr\u00e8s en math\u00e9matiques r\u00e9alis\u00e9s depuis l'Antiquit\u00e9 et l'invention de",
        "\u00c0 partir de la fin du XIXe si\u00e8cle, la d\u00e9couverte du spectre \u00e9lectromagn\u00e9tique et du monde de l'atome",
        "La cosmologie, qui \u00e9tudie l'origine et l'\u00e9volution de l'Univers dans son ensemble \u00c0 ces domaines d",
        "Actuellement, les astronomes professionnels ont tous une formation pouss\u00e9e en astrophysique et leurs",
        "S\u00e9quence vid\u00e9o John Richard Bond explique le r\u00f4le de l'astronomie.",
        "Verbatim L'aventure astronomique canadienne",
        "Instruments Les \u00c9gyptiens utilisent le transit pour la premi\u00e8re fois, environ 2000 ans avant J\u00e9sus-C",
        "Observatoires Depuis des milliers d'ann\u00e9es, les autochtones observent les \u00e9toiles pour se rep\u00e9rer da",
        "Instruments Les Assyriens sont vraisemblablement les premiers \u00e0 utliser la lentille pour grossir les",
        "\u00c9volutionImages Le peintre flamand Jan van Eyck r\u00e9alise le dessin le plus ancien connu de la Lune da",
        "Comme tous les navigateurs de l'\u00e9poque, il se dirige gr\u00e2ce aux \u00e9toiles",
        "\u00c9volutionImages Leonard de Vinci effectue ce croquis de la Lune",
        "Observatoires Jacques Cartier explore l\u2019int\u00e9rieur du continent",
        "Il trouve l'entr\u00e9e du fleuve Saint-Laurent au moment de la pluie d'\u00e9toiles filantes des Pers\u00e9ides",
        "Instruments L\u00e9onard Digges r\u00e9alise en Angleterre le premier assemblage de lentilles en une lunette d",
        "Observatoires L\u2019astronomie fait ses d\u00e9buts au Canada avec l'arriv\u00e9e du premier gouverneur de la Nouv",
        "\u00c9volutionImages Le Britannique Thomas Harriot r\u00e9alise (plusieurs mois avant Galil\u00e9e) le premier croq",
        "Instruments En Italie, Galil\u00e9e publie \u00abLe messager des \u00e9toiles\u00bb et r\u00e9sume les observations astronomi",
        "Observatoires Les J\u00e9suites rapportent les premi\u00e8res observations astronomiques faites \u00e0 partir du Ca",
        "\u00c9volutionImages Premier dessin connu de la n\u00e9buleuse d\u2019Orion par Giovanni Batista Hodierna",
        "Il est probable qu'un observatoire temporaire y ait exist\u00e9",
        "\u00c9volutionImages La premi\u00e8re carte lunaire o\u00f9 sont indiqu\u00e9es les longitudes et les latitudes",
        "La carte de base fut dessin\u00e9e dans les ann\u00e9es 1850 par l'astronome allemand Tobias Mayer; les longit",
        "Cr\u00e9ation de l'observatoire de Kingston en Ontario",
        "Cr\u00e9ation de l'observatoire du Coll\u00e8ge King, \u00e0 Windsor en Nouvelle-\u00c9cosse.",
        "L'inventeur am\u00e9ricain George Eastman (fondateur de la cie Eastman-Kodak) construit une m",
        "Invention de l'interf\u00e9rom\u00e8tre par le physicien am\u00e9ricain Albert Abraham Michelson",
        "L'Observatoire de Paris prend ce clich\u00e9 de la Lune pour son Atlas Photographique de",
        "L'opticien am\u00e9ricain George Willis Ritchey r\u00e9alise des photographies de la Lune d'un",
        "Elles sont si bonnes que soixante ans plus tard, en 1960, l'astronome am\u00e9ricano-dan",
        "La premi\u00e8re photographie de la Lune prise par une sonde spatiale am\u00e9ricaine, Ranger",
        "Les astronautes de la mission am\u00e9ricaine Apollo 11 r\u00e9alisent les premi\u00e8res photograp",
        "Les Am\u00e9ricains Willard Boyle et George Smith dessinent la structure de base d\u2019un CCD",
        "La premi\u00e8re image astronomique prise par une cam\u00e9ra CCD est cette photographie de la",
        "Environ 2/3 des Canadiens ne voient plus la Voie lact\u00e9e",
        "En 1634, l'astronomie devient officiellement partie int\u00e9grante des t\u00e2ches de l'Ing\u00e9nieur de Qu\u00e9bec e",
        "\u00c0 cette \u00e9poque, l'astronomie a une fonction essentiellement pratique",
        "Elle sert \u00e0 d\u00e9terminer l'heure avec exactitude et \u00e0 dresser pr\u00e9cis\u00e9ment les cartes g\u00e9ographiques",
        "Le Coll\u00e8ge de Qu\u00e9bec fut ferm\u00e9 par les Britanniques et l'enseignement transf\u00e9r\u00e9 au S\u00e9minaire de Qu\u00e9b",
        "recette gateau choco rapide",
        "ok mais genre l'\u00e9volution des smartphones depuis 2007 mdrrr",
        "Dans le contexte de la r\u00e9volution industrielle du XIXe si\u00e8cle, analysez l'impact des nouvelles technologies sur les conditions de travail des ouvriers et leur influence sur les mouvements sociaux qui ont \u00e9merg\u00e9 pendant cette p\u00e9riode",
        "th\u00e9orie quantique explications stp",
        "pq les chats d\u00e9testent l'eau en vrai",
        "Dans quelle mesure les r\u00e9seaux sociaux et les nouvelles technologies de communication ont-ils transform\u00e9 les relations interpersonnelles au XXIe si\u00e8cle ? D\u00e9veloppez votre analyse en consid\u00e9rant les aspects positifs et n\u00e9gatifs de cette r\u00e9volution num\u00e9rique sur la soci\u00e9t\u00e9 contemporaine",
        "meilleure technique pour apprendre le japonais rapidement",
        "\u00c0 partir d'une analyse approfondie des \u0153uvres majeures de Victor Hugo, d\u00e9montrez comment l'auteur utilise la m\u00e9taphore et le symbolisme pour d\u00e9noncer les injustices sociales de son \u00e9poque, en vous appuyant sur des exemples pr\u00e9cis tir\u00e9s de \"Les Mis\u00e9rables\" et \"Notre-Dame de Paris\"",
        "syst\u00e8mes dynamiques non lin\u00e9aires applications concr\u00e8tes",
        "help je comprends pas les d\u00e9riv\u00e9es partielles",
        "Pr\u00e9sentez une analyse d\u00e9taill\u00e9e des cons\u00e9quences environnementales, \u00e9conomiques et sociales du r\u00e9chauffement climatique dans les r\u00e9gions arctiques, en examinant particuli\u00e8rement l'impact sur les populations autochtones et les \u00e9cosyst\u00e8mes locaux",
        "omg trop bien la nouvelle expo au louvre",
        "\u00c9tablissez une comparaison approfondie entre les diff\u00e9rentes approches de l'intelligence artificielle, notamment l'apprentissage profond et l'apprentissage par renforcement, en \u00e9valuant leurs applications potentielles dans le domaine de la m\u00e9decine personnalis\u00e9e",
        "meilleure routine skincare pour peau mixte help",
        "Comment les avanc\u00e9es r\u00e9centes en neurosciences ont-elles modifi\u00e9 notre compr\u00e9hension de la conscience et du libre arbitre ? D\u00e9veloppez votre r\u00e9ponse en int\u00e9grant les derni\u00e8res d\u00e9couvertes scientifiques et leurs implications philosophiques",
        "ptdr mais en vrai pourquoi les dinosaures ils ont tous disparu comme \u00e7a",
        "Analysez l'\u00e9volution des techniques de production cin\u00e9matographique depuis l'av\u00e8nement du num\u00e9rique, en examinant particuli\u00e8rement l'impact sur la narration visuelle et l'exp\u00e9rience spectatorielle dans le cin\u00e9ma contemporain",
        "besoin conseils jardinage urbain appartement petit budget",
        "Dans le cadre de la transition \u00e9nerg\u00e9tique mondiale, \u00e9valuez la viabilit\u00e9 des diff\u00e9rentes sources d'\u00e9nergie renouvelable en tenant compte des contraintes technologiques, \u00e9conomiques et g\u00e9opolitiques actuelles",
        "quelqu'un peut m'expliquer la relativit\u00e9 g\u00e9n\u00e9rale svp mais genre simple",
        "Proposez une analyse critique de l'\u00e9volution des mouvements f\u00e9ministes depuis le XIXe si\u00e8cle jusqu'\u00e0 nos jours, en examinant leurs impacts sur les soci\u00e9t\u00e9s occidentales et les d\u00e9fis contemporains",
        "techniques m\u00e9ditation d\u00e9butant stress intense travail",
        "Examinez l'influence des nouvelles technologies de l'information sur les processus d\u00e9mocratiques contemporains, en consid\u00e9rant notamment leur r\u00f4le dans la formation de l'opinion publique et la participation citoyenne",
        "quelle diff\u00e9rence entre virus et bact\u00e9rie en fait",
        "meilleurs exercices musculation sans matos \u00e0 la maison",
        "Dans quelle mesure l'art contemporain refl\u00e8te-t-il les pr\u00e9occupations sociales et politiques de notre \u00e9poque ? D\u00e9veloppez votre r\u00e9ponse en vous appuyant sur des exemples d'\u0153uvres significatives",
        "quick comment faire un CV qui d\u00e9chire",
        "Analysez l'impact de la mondialisation sur les traditions culinaires locales et l'\u00e9mergence de nouvelles formes de gastronomie hybride dans les m\u00e9tropoles internationales.",
        "conseils photo portrait lumi\u00e8re naturelle",
        "\u00c9tudiez les cons\u00e9quences psychologiques et sociologiques de l'isolement social pendant les p\u00e9riodes de confinement, en vous appuyant sur les donn\u00e9es r\u00e9centes en sciences sociales",
        "tuto maquillage yeux effet smoky",
        "Pr\u00e9sentez une analyse comparative des diff\u00e9rents syst\u00e8mes \u00e9ducatifs dans le monde, en \u00e9valuant leurs forces et leurs faiblesses respectives face aux d\u00e9fis du XXIe si\u00e8cle",
        "j'arrive pas \u00e0 dormir help conseils insomnie chronique",
        "Examinez l'\u00e9volution des pratiques agricoles durables et leur potentiel pour r\u00e9pondre aux d\u00e9fis de la s\u00e9curit\u00e9 alimentaire mondiale face au changement climatique",
        "quelqu'un sait comment on fait du pain au levain",
        "L'impact des algorithmes de recommandation sur la diversit\u00e9 culturelle et la formation des opinions : pr\u00e9sentez une analyse critique en consid\u00e9rant les enjeux \u00e9thiques et soci\u00e9taux",
        "meilleure m\u00e9thode apprentissage langues \u00e9trang\u00e8res rapidement efficacement",
        "trucs et astuces organisation petits espaces",
        "D\u00e9crivez les m\u00e9canismes mol\u00e9culaires impliqu\u00e9s dans le vieillissement cellulaire et explorez les r\u00e9centes avanc\u00e9es en recherche sur la long\u00e9vit\u00e9.",
        "pq le ciel est bleu en vrai",
        "Dans quelle mesure l'architecture contemporaine r\u00e9pond-elle aux enjeux environnementaux et sociaux de notre \u00e9poque ? Analysez plusieurs exemples significatifs.",
        "comment g\u00e9rer anxi\u00e9t\u00e9 examens derni\u00e8re minute",
        "\u00c9valuez l'impact des r\u00e9seaux sociaux sur le d\u00e9veloppement psychologique des adolescents, en consid\u00e9rant \u00e0 la fois les risques et les opportunit\u00e9s.",
        "quelqu'un peut m'expliquer le bitcoin facilement stp",
        "techniques respiration stress intense pr\u00e9sentation",
        "Analysez l'\u00e9volution des relations internationales dans un monde multipolaire, en consid\u00e9rant particuli\u00e8rement l'\u00e9mergence de nouvelles puissances \u00e9conomiques.",
        "pq les plantes grasses meurent alors que je les arrose pas",
        "meilleur setup pour streamer petit budget",
        "Dans le contexte de la crise \u00e9cologique actuelle, examinez les solutions propos\u00e9es par l'\u00e9conomie circulaire et \u00e9valuez leur potentiel de transformation des mod\u00e8les \u00e9conomiques traditionnels.",
        "comment faire des macarons qui ratent pas",
        "Explorez l'impact des nouvelles technologies sur l'\u00e9volution du march\u00e9 du travail et les comp\u00e9tences requises pour les emplois du futur.",
        "wesh alors la derni\u00e8re saison de one piece elle d\u00e9chire sa m\u00e8re",
        "Veuillez pr\u00e9senter une analyse approfondie des cons\u00e9quences g\u00e9opolitiques de la fonte des glaces arctiques",
        "comment faire pousser des tomates cerises sur son balcon",
        "mdr t'as vu le nouveau tiktok de squeezie",
        "Dans quelle mesure l'\u00e9pig\u00e9n\u00e9tique influence-t-elle l'expression des g\u00e8nes au cours du d\u00e9veloppement",
        "pq mes plantes elles cr\u00e8vent toutes alors que je follow les tutos insta",
        "La digitalisation des services bancaires: avantages et inconv\u00e9nients pour les populations vuln\u00e9rables",
        "j'comprends R aux maths quelqu'un peut m'aider stp",
        "\u00c9laborez une critique litt\u00e9raire comparative des \u0153uvres de Camus et Sartre.",
        "flemme de cuisiner ce soir quick des id\u00e9es de repas healthy",
        "Les implications \u00e9thiques de l'utilisation de l'intelligence artificielle dans le syst\u00e8me judiciaire",
        "wallah le nouveau resto viet du quartier il est trop dar",
        "genre pkoi les chats ils font flipper quand ils fixent le vide",
        "Analysez l'impact des r\u00e9seaux sociaux sur les mouvements sociaux contemporains",
        "quelqu'un sait comment enlever une tache de vin rouge sur un t-shirt blanc",
        "Proposez une m\u00e9thodologie pour l'impl\u00e9mentation d'un syst\u00e8me de gestion des d\u00e9chets durables.",
        "trop relou le nouveau update de mon phone il bug de ouf",
        "Les m\u00e9canismes neurobiologiques de l'apprentissage et de la m\u00e9morisation",
        "pq les profs ils mettent toujours les partiels le lundi matin s\u00e9rieux",
        "Comment optimiser la production d'\u00e9nergie photovolta\u00efque en milieu urbain",
        "les gars qui peut m'expliquer le multivers en fait",
        "\u00c9tudiez l'influence des m\u00e9dias sociaux sur les comportements alimentaires des adolescents.",
        "omg trop bien le nouveau film marvel mais genre c'est quoi ce plot twist",
        "Quelles solutions pour r\u00e9duire l'empreinte carbone du secteur textile",
        "ptn j'ai encore perdu mes cl\u00e9s quelqu'un a une astuce",
        "L'impact du t\u00e9l\u00e9travail sur la sant\u00e9 mentale des employ\u00e9s: une analyse multifactorielle",
        "meilleure technique pour r\u00e9viser ses partiels \u00e0 la derni\u00e8re minute",
        "comment on fait pour devenir v\u00e9g\u00e9tarien sans mourir de faim mdr",
        "Analysez les enjeux \u00e9thiques de la modification g\u00e9n\u00e9tique des embryons humains",
        "trop dar la nouvelle expo sur l'art num\u00e9rique au centre pompidou",
        "qui peut m'expliquer la crypto sans me parler comme si j'\u00e9tais un boomer stp",
        "La d\u00e9mocratisation de l'acc\u00e8s \u00e0 l'espace: d\u00e9fis et opportunit\u00e9s",
        "fr\u00e8re comment on fait pour pas stresser pendant un entretien d'embauche",
        "\u00c9valuez l'impact des microplastiques sur les \u00e9cosyst\u00e8mes marins",
        "quelqu'un conna\u00eet une bonne appli pour m\u00e9diter gratuitement",
        "Les cons\u00e9quences socio-\u00e9conomiques de l'automatisation dans l'industrie manufacturi\u00e8re",
        "jsp comment faire mon cv pour un stage help",
        "wesh les \u00e9tudes de droit c'est vraiment aussi hardcore qu'on dit",
        "Explorez les applications potentielles de la r\u00e9alit\u00e9 augment\u00e9e dans l'\u00e9ducation",
        "qui sait faire une carbonara sans la transformer en soupe mdr",
        "L'influence des algorithmes de recommandation sur la diversit\u00e9 culturelle",
        "comment g\u00e9rer son budget quand t'es \u00e9tudiant fauch\u00e9",
        "trop relou le nouveau design de twitter/x qui valide",
        "Analysez l'\u00e9volution des relations sino-africaines depuis",
        "quelqu'un peut m'expliquer pourquoi mon cactus il meurt alors qu'il a RIEN besoin",
        "Les d\u00e9fis de la cybers\u00e9curit\u00e9 dans un monde hyperconnect\u00e9",
        "eh les gars c koi le meilleur manga de tous les temps et pk c'est one piece",
        "Examinez l'impact du changement climatique sur les flux migratoires.",
        "comment faire du sport quand t'as z\u00e9ro motivation et le canap\u00e9 il t'appelle",
        "pq les profs ils nous donnent 47283 projets en m\u00eame temps s\u00e9rieux",
        "L'\u00e9mergence des monnaies num\u00e9riques: implications pour l'\u00e9conomie mondiale",
        "quelqu'un peut m'expliquer la philo sans me donner mal au cr\u00e2ne stp",
        "\u00c9valuez l'efficacit\u00e9 des politiques de r\u00e9duction des d\u00e9chets plastiques",
        "les bros vous conseillez quoi comme premier appareil",
        "Comment optimiser l'apprentissage d'une langue \u00e9trang\u00e8re \u00e0 l'\u00e2ge adulte",
        "genre pk on doit apprendre les maths quand on veut faire de la litt\u00e9rature",
        "trop le seum mon ordi il a plant\u00e9 avant que je sauvegarde mon rapport",
        "La r\u00e9volution quantique: applications pratiques et perspectives d'avenir",
        "qui peut m'expliquer comment on fait un bon caf\u00e9 avec une machine capsule",
        "Analysez l'impact des r\u00e9seaux sociaux sur la sant\u00e9 mentale des adolescents",
        "c'est quoi le meilleur moyen de pas s'endormir en cours \u00e0 8h du mat",
        "Les enjeux de la pr\u00e9servation du patrimoine culturel immat\u00e9riel",
        "comment faire pour que mon chat arr\u00eate de me r\u00e9veiller \u00e0 3h du mat mdrrr",
        "\u00c9tudiez l'influence de l'architecture bioclimatique sur la consommation \u00e9nerg\u00e9tique",
        "quelqu'un sait comment on fait pour avoir la wifi qui marche bien en coloc",
        "wesh qui veut m'expliquer la th\u00e9orie des cordes avec des memes",
        "Le d\u00e9veloppement des \u00e9nergies renouvelables en Afrique subsaharienne",
        "pq les profs de maths ils expliquent jamais rien clairement s\u00e9rieux",
        "Analysez l'impact des plateformes de streaming sur l'industrie musicale",
        "comment survivre \u00e0 une journ\u00e9e de cours sans caf\u00e9 help",
        "Les implications \u00e9thiques de l'intelligence artificielle dans la m\u00e9decine",
        "qui peut m'expliquer comment on fait un budget sans mourir d'ennui",
        "\u00c9valuez l'efficacit\u00e9 des politiques de mobilit\u00e9 douce en milieu urbain",
        "jsp",
        "aide maths stp",
        "quoi manger ce soir",
        "pq la vie est nulle",
        "comment r\u00e9parer un radiateur qui fuit",
        "Quelqu'un peut m'expliquer l'inflation",
        "Dans le contexte actuel de transition \u00e9cologique, analysez les diff\u00e9rentes strat\u00e9gies d'adaptation des entreprises face aux nouvelles r\u00e9glementations environnementales et leur impact sur la comp\u00e9titivit\u00e9 \u00e9conomique",
        "wesh les gars qui conna\u00eet un bon resto pas cher",
        "c'est quoi le meilleur film de tous les temps et pourquoi",
        "Les implications philosophiques et \u00e9thiques du d\u00e9veloppement de la conscience artificielle dans les syst\u00e8mes d'IA avanc\u00e9s m\u00e9ritent une analyse approfondie, particuli\u00e8rement en ce qui concerne la notion de responsabilit\u00e9 morale et de libre arbitre",
        "comment survivre \u00e0 la fac",
        "ptn j'ai encore rat\u00e9 mon bus",
        "\u00c9valuez l'impact des r\u00e9seaux sociaux sur le d\u00e9veloppement des mouvements sociaux contemporains, en consid\u00e9rant notamment leur r\u00f4le dans la mobilisation citoyenne et la diffusion de l'information",
        "quelqu'un sait faire une pizza maison qui soit pas d\u00e9gueu",
        "Analysez les cons\u00e9quences socio-\u00e9conomiques de l'automatisation croissante du march\u00e9 du travail sur les emplois traditionnels et les comp\u00e9tences requises pour les m\u00e9tiers de demain",
        "comment drague-t-on en 2025 s\u00e9rieux",
        "urgent besoin d'aide en chimie orga",
        "Dans quelle mesure les avanc\u00e9es en neurosciences modifient-elles notre compr\u00e9hension du processus d'apprentissage et quelles sont les implications pour les m\u00e9thodes p\u00e9dagogiques modernes",
        "pq les chats dorment tout le temps",
        "Les enjeux g\u00e9opolitiques de l'exploitation des ressources naturelles en Arctique : une analyse des tensions internationales et des d\u00e9fis environnementaux dans un contexte de r\u00e9chauffement climatique",
        "Explorez l'\u00e9volution des pratiques culturelles \u00e0 l'\u00e8re du num\u00e9rique, en examinant particuli\u00e8rement l'impact des plateformes de streaming sur la consommation et la production artistique",
        "comment faire pousser des herbes aromatiques dans son appart",
        "La d\u00e9mocratisation de l'acc\u00e8s \u00e0 l'espace et ses implications pour le d\u00e9veloppement technologique et \u00e9conomique mondial : perspectives et d\u00e9fis",
        "quelqu'un peut m'expliquer le bitcoin en langage norma",
        "meilleure recette",
        "Analysez l'influence des r\u00e9seaux sociaux sur la formation et la diffusion des opinions politiques dans les soci\u00e9t\u00e9s d\u00e9mocratiques contemporaines"
    ]
}